
BP_Init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000211c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080022b4  080022b4  000122b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080022e0  080022e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080022e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000108  2000000c  080022f0  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000114  080022f0  00020114  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009e7f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001bb4  00000000  00000000  00029ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000808  00000000  00000000  0002ba70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007f0  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00015118  00000000  00000000  0002ca68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007b91  00000000  00000000  00041b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00082ede  00000000  00000000  00049711  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000cc5ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001494  00000000  00000000  000cc66c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00004caa  00000000  00000000  000cdb00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800229c 	.word	0x0800229c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800229c 	.word	0x0800229c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004da:	2100      	movs	r1, #0
 80004dc:	9100      	str	r1, [sp, #0]
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_GPIO_Init+0x34>)
 80004e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004e6:	631a      	str	r2, [r3, #48]	; 0x30
 80004e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80004ee:	9200      	str	r2, [sp, #0]
 80004f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	9101      	str	r1, [sp, #4]
 80004f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f6:	f042 0201 	orr.w	r2, r2, #1
 80004fa:	631a      	str	r2, [r3, #48]	; 0x30
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	9b01      	ldr	r3, [sp, #4]

}
 8000506:	b002      	add	sp, #8
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800

08000510 <MX_DMA_Init>:
{
 8000510:	b500      	push	{lr}
 8000512:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000514:	2100      	movs	r1, #0
 8000516:	9101      	str	r1, [sp, #4]
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_DMA_Init+0x30>)
 800051a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000520:	631a      	str	r2, [r3, #48]	; 0x30
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800052c:	460a      	mov	r2, r1
 800052e:	203a      	movs	r0, #58	; 0x3a
 8000530:	f000 f9e2 	bl	80008f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000534:	203a      	movs	r0, #58	; 0x3a
 8000536:	f000 fa13 	bl	8000960 <HAL_NVIC_EnableIRQ>
}
 800053a:	b003      	add	sp, #12
 800053c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000540:	40023800 	.word	0x40023800

08000544 <MX_I2S1_Init>:
{
 8000544:	b508      	push	{r3, lr}
  hi2s1.Instance = SPI1;
 8000546:	4809      	ldr	r0, [pc, #36]	; (800056c <MX_I2S1_Init+0x28>)
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_I2S1_Init+0x2c>)
 800054a:	6003      	str	r3, [r0, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800054c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000550:	6043      	str	r3, [r0, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000552:	2300      	movs	r3, #0
 8000554:	6083      	str	r3, [r0, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000556:	60c3      	str	r3, [r0, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000558:	6103      	str	r3, [r0, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 800055a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800055e:	6142      	str	r2, [r0, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000560:	6183      	str	r3, [r0, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000562:	61c3      	str	r3, [r0, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000564:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000566:	f000 fcbf 	bl	8000ee8 <HAL_I2S_Init>
}
 800056a:	bd08      	pop	{r3, pc}
 800056c:	20000028 	.word	0x20000028
 8000570:	40013000 	.word	0x40013000

08000574 <MX_USART2_UART_Init>:
{
 8000574:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000576:	4808      	ldr	r0, [pc, #32]	; (8000598 <MX_USART2_UART_Init+0x24>)
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_USART2_UART_Init+0x28>)
 800057a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 31250;
 800057c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000580:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	2300      	movs	r3, #0
 8000584:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000586:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000588:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800058a:	220c      	movs	r2, #12
 800058c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000590:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000592:	f001 fd03 	bl	8001f9c <HAL_UART_Init>
}
 8000596:	bd08      	pop	{r3, pc}
 8000598:	20000070 	.word	0x20000070
 800059c:	40004400 	.word	0x40004400

080005a0 <SystemClock_Config>:
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a4:	2230      	movs	r2, #48	; 0x30
 80005a6:	2100      	movs	r1, #0
 80005a8:	a80e      	add	r0, sp, #56	; 0x38
 80005aa:	f001 fe6f 	bl	800228c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ae:	2400      	movs	r4, #0
 80005b0:	9409      	str	r4, [sp, #36]	; 0x24
 80005b2:	940a      	str	r4, [sp, #40]	; 0x28
 80005b4:	940b      	str	r4, [sp, #44]	; 0x2c
 80005b6:	940c      	str	r4, [sp, #48]	; 0x30
 80005b8:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ba:	9403      	str	r4, [sp, #12]
 80005bc:	9404      	str	r4, [sp, #16]
 80005be:	9405      	str	r4, [sp, #20]
 80005c0:	9406      	str	r4, [sp, #24]
 80005c2:	9407      	str	r4, [sp, #28]
 80005c4:	9408      	str	r4, [sp, #32]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	9401      	str	r4, [sp, #4]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <SystemClock_Config+0xa8>)
 80005ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005d0:	641a      	str	r2, [r3, #64]	; 0x40
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	9402      	str	r4, [sp, #8]
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <SystemClock_Config+0xac>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f2:	2601      	movs	r6, #1
 80005f4:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fa:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2502      	movs	r5, #2
 80005fe:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000600:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000604:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000606:	230c      	movs	r3, #12
 8000608:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 96;
 800060a:	2360      	movs	r3, #96	; 0x60
 800060c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	a80e      	add	r0, sp, #56	; 0x38
 8000616:	f000 ff5f 	bl	80014d8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800062a:	2103      	movs	r1, #3
 800062c:	a809      	add	r0, sp, #36	; 0x24
 800062e:	f001 f99d 	bl	800196c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000632:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000634:	23c0      	movs	r3, #192	; 0xc0
 8000636:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000638:	2310      	movs	r3, #16
 800063a:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800063c:	9506      	str	r5, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800063e:	a803      	add	r0, sp, #12
 8000640:	f001 fa6a 	bl	8001b18 <HAL_RCCEx_PeriphCLKConfig>
}
 8000644:	b01a      	add	sp, #104	; 0x68
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <main>:
{
 8000650:	b508      	push	{r3, lr}
  HAL_Init();
 8000652:	f000 f913 	bl	800087c <HAL_Init>
  SystemClock_Config();
 8000656:	f7ff ffa3 	bl	80005a0 <SystemClock_Config>
  MX_GPIO_Init();
 800065a:	f7ff ff3d 	bl	80004d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800065e:	f7ff ff57 	bl	8000510 <MX_DMA_Init>
  MX_I2S1_Init();
 8000662:	f7ff ff6f 	bl	8000544 <MX_I2S1_Init>
  MX_USART2_UART_Init();
 8000666:	f7ff ff85 	bl	8000574 <MX_USART2_UART_Init>
 800066a:	e7fe      	b.n	800066a <main+0x1a>

0800066c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800066c:	4770      	bx	lr
	...

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	2100      	movs	r1, #0
 8000674:	9100      	str	r1, [sp, #0]
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <HAL_MspInit+0x34>)
 8000678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800067a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800067e:	645a      	str	r2, [r3, #68]	; 0x44
 8000680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000682:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	9101      	str	r1, [sp, #4]
 800068c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800068e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000692:	641a      	str	r2, [r3, #64]	; 0x40
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	b002      	add	sp, #8
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800

080006a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80006a8:	b530      	push	{r4, r5, lr}
 80006aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	2300      	movs	r3, #0
 80006ae:	9303      	str	r3, [sp, #12]
 80006b0:	9304      	str	r3, [sp, #16]
 80006b2:	9305      	str	r3, [sp, #20]
 80006b4:	9306      	str	r3, [sp, #24]
 80006b6:	9307      	str	r3, [sp, #28]
  if(hi2s->Instance==SPI1)
 80006b8:	6802      	ldr	r2, [r0, #0]
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <HAL_I2S_MspInit+0xac>)
 80006bc:	429a      	cmp	r2, r3
 80006be:	d001      	beq.n	80006c4 <HAL_I2S_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006c0:	b009      	add	sp, #36	; 0x24
 80006c2:	bd30      	pop	{r4, r5, pc}
 80006c4:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006c6:	2500      	movs	r5, #0
 80006c8:	9501      	str	r5, [sp, #4]
 80006ca:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80006ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006d4:	645a      	str	r2, [r3, #68]	; 0x44
 80006d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80006dc:	9201      	str	r2, [sp, #4]
 80006de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	9502      	str	r5, [sp, #8]
 80006e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e4:	f042 0201 	orr.w	r2, r2, #1
 80006e8:	631a      	str	r2, [r3, #48]	; 0x30
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	9302      	str	r3, [sp, #8]
 80006f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80006f4:	23b0      	movs	r3, #176	; 0xb0
 80006f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006fc:	2305      	movs	r3, #5
 80006fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	a903      	add	r1, sp, #12
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <HAL_I2S_MspInit+0xb0>)
 8000704:	f000 fb1e 	bl	8000d44 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000708:	4814      	ldr	r0, [pc, #80]	; (800075c <HAL_I2S_MspInit+0xb4>)
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_I2S_MspInit+0xb8>)
 800070c:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800070e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000712:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000718:	60c5      	str	r5, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800071a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071e:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000724:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072a:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800072c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000730:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000732:	6205      	str	r5, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000734:	2304      	movs	r3, #4
 8000736:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000738:	2303      	movs	r3, #3
 800073a:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800073c:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800073e:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000740:	f000 f998 	bl	8000a74 <HAL_DMA_Init>
 8000744:	b918      	cbnz	r0, 800074e <HAL_I2S_MspInit+0xa6>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_I2S_MspInit+0xb4>)
 8000748:	63a3      	str	r3, [r4, #56]	; 0x38
 800074a:	639c      	str	r4, [r3, #56]	; 0x38
}
 800074c:	e7b8      	b.n	80006c0 <HAL_I2S_MspInit+0x18>
      Error_Handler();
 800074e:	f7ff ff8d 	bl	800066c <Error_Handler>
 8000752:	e7f8      	b.n	8000746 <HAL_I2S_MspInit+0x9e>
 8000754:	40013000 	.word	0x40013000
 8000758:	40020000 	.word	0x40020000
 800075c:	200000b0 	.word	0x200000b0
 8000760:	40026440 	.word	0x40026440

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b510      	push	{r4, lr}
 8000766:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	2300      	movs	r3, #0
 800076a:	9303      	str	r3, [sp, #12]
 800076c:	9304      	str	r3, [sp, #16]
 800076e:	9305      	str	r3, [sp, #20]
 8000770:	9306      	str	r3, [sp, #24]
 8000772:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000774:	6802      	ldr	r2, [r0, #0]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_UART_MspInit+0x74>)
 8000778:	429a      	cmp	r2, r3
 800077a:	d001      	beq.n	8000780 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800077c:	b008      	add	sp, #32
 800077e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000780:	2400      	movs	r4, #0
 8000782:	9401      	str	r4, [sp, #4]
 8000784:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800078a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800078e:	641a      	str	r2, [r3, #64]	; 0x40
 8000790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000792:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	9402      	str	r4, [sp, #8]
 800079c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079e:	f042 0201 	orr.w	r2, r2, #1
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	9302      	str	r3, [sp, #8]
 80007ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ae:	230c      	movs	r3, #12
 80007b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ba:	2307      	movs	r3, #7
 80007bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	a903      	add	r1, sp, #12
 80007c0:	4806      	ldr	r0, [pc, #24]	; (80007dc <HAL_UART_MspInit+0x78>)
 80007c2:	f000 fabf 	bl	8000d44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007c6:	4622      	mov	r2, r4
 80007c8:	4621      	mov	r1, r4
 80007ca:	2026      	movs	r0, #38	; 0x26
 80007cc:	f000 f894 	bl	80008f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007d0:	2026      	movs	r0, #38	; 0x26
 80007d2:	f000 f8c5 	bl	8000960 <HAL_NVIC_EnableIRQ>
}
 80007d6:	e7d1      	b.n	800077c <HAL_UART_MspInit+0x18>
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40020000 	.word	0x40020000

080007e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e0:	4770      	bx	lr

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	e7fe      	b.n	80007e8 <UsageFault_Handler>

080007ea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	4770      	bx	lr

080007ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f2:	f000 f85d 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f6:	bd08      	pop	{r3, pc}

080007f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007fa:	4802      	ldr	r0, [pc, #8]	; (8000804 <USART2_IRQHandler+0xc>)
 80007fc:	f001 fc5c 	bl	80020b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000800:	bd08      	pop	{r3, pc}
 8000802:	bf00      	nop
 8000804:	20000070 	.word	0x20000070

08000808 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000808:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800080a:	4802      	ldr	r0, [pc, #8]	; (8000814 <DMA2_Stream2_IRQHandler+0xc>)
 800080c:	f000 f9ac 	bl	8000b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000810:	bd08      	pop	{r3, pc}
 8000812:	bf00      	nop
 8000814:	200000b0 	.word	0x200000b0

08000818 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SystemInit+0x18>)
 800081a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800081e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800082a:	609a      	str	r2, [r3, #8]
#endif
}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_InitTick+0x40>)
 800083a:	7818      	ldrb	r0, [r3, #0]
 800083c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000840:	fbb3 f3f0 	udiv	r3, r3, r0
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <HAL_InitTick+0x44>)
 8000846:	6810      	ldr	r0, [r2, #0]
 8000848:	fbb0 f0f3 	udiv	r0, r0, r3
 800084c:	f000 f896 	bl	800097c <HAL_SYSTICK_Config>
 8000850:	b968      	cbnz	r0, 800086e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000852:	2c0f      	cmp	r4, #15
 8000854:	d901      	bls.n	800085a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000856:	2001      	movs	r0, #1
 8000858:	e00a      	b.n	8000870 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085a:	2200      	movs	r2, #0
 800085c:	4621      	mov	r1, r4
 800085e:	f04f 30ff 	mov.w	r0, #4294967295
 8000862:	f000 f849 	bl	80008f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <HAL_InitTick+0x40>)
 8000868:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800086a:	2000      	movs	r0, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800086e:	2001      	movs	r0, #1
}
 8000870:	bd10      	pop	{r4, pc}
 8000872:	bf00      	nop
 8000874:	20000004 	.word	0x20000004
 8000878:	20000000 	.word	0x20000000

0800087c <HAL_Init>:
{
 800087c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_Init+0x30>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000886:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800088e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000896:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f81b 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff ffc8 	bl	8000834 <HAL_InitTick>
  HAL_MspInit();
 80008a4:	f7ff fee4 	bl	8000670 <HAL_MspInit>
}
 80008a8:	2000      	movs	r0, #0
 80008aa:	bd08      	pop	{r3, pc}
 80008ac:	40023c00 	.word	0x40023c00

080008b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_IncTick+0x10>)
 80008b2:	6811      	ldr	r1, [r2, #0]
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_IncTick+0x14>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	440b      	add	r3, r1
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000110 	.word	0x20000110
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008c8:	4b01      	ldr	r3, [pc, #4]	; (80008d0 <HAL_GetTick+0x8>)
 80008ca:	6818      	ldr	r0, [r3, #0]
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000110 	.word	0x20000110

080008d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008dc:	041b      	lsls	r3, r3, #16
 80008de:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e0:	0200      	lsls	r0, r0, #8
 80008e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80008e8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80008ec:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80008f0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008f8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_NVIC_SetPriority+0x60>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000902:	f1c3 0407 	rsb	r4, r3, #7
 8000906:	2c04      	cmp	r4, #4
 8000908:	bf28      	it	cs
 800090a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090c:	1d1d      	adds	r5, r3, #4
 800090e:	2d06      	cmp	r5, #6
 8000910:	d918      	bls.n	8000944 <HAL_NVIC_SetPriority+0x4c>
 8000912:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 35ff 	mov.w	r5, #4294967295
 8000918:	fa05 f404 	lsl.w	r4, r5, r4
 800091c:	ea21 0104 	bic.w	r1, r1, r4
 8000920:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000922:	fa05 f303 	lsl.w	r3, r5, r3
 8000926:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800092c:	2800      	cmp	r0, #0
 800092e:	db0b      	blt.n	8000948 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	0109      	lsls	r1, r1, #4
 8000932:	b2c9      	uxtb	r1, r1
 8000934:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000938:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800093c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000940:	bc30      	pop	{r4, r5}
 8000942:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000944:	2300      	movs	r3, #0
 8000946:	e7e5      	b.n	8000914 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	f000 000f 	and.w	r0, r0, #15
 800094c:	0109      	lsls	r1, r1, #4
 800094e:	b2c9      	uxtb	r1, r1
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <HAL_NVIC_SetPriority+0x64>)
 8000952:	5419      	strb	r1, [r3, r0]
 8000954:	e7f4      	b.n	8000940 <HAL_NVIC_SetPriority+0x48>
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00
 800095c:	e000ed14 	.word	0xe000ed14

08000960 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000960:	2800      	cmp	r0, #0
 8000962:	db07      	blt.n	8000974 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000964:	f000 021f 	and.w	r2, r0, #31
 8000968:	0940      	lsrs	r0, r0, #5
 800096a:	2301      	movs	r3, #1
 800096c:	4093      	lsls	r3, r2
 800096e:	4a02      	ldr	r2, [pc, #8]	; (8000978 <HAL_NVIC_EnableIRQ+0x18>)
 8000970:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100

0800097c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	3801      	subs	r0, #1
 800097e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000982:	d20a      	bcs.n	800099a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_SYSTICK_Config+0x24>)
 8000986:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_SYSTICK_Config+0x28>)
 800098a:	21f0      	movs	r1, #240	; 0xf0
 800098c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000990:	2000      	movs	r0, #0
 8000992:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80009a8:	6802      	ldr	r2, [r0, #0]
 80009aa:	b2d3      	uxtb	r3, r2
 80009ac:	3b10      	subs	r3, #16
 80009ae:	490b      	ldr	r1, [pc, #44]	; (80009dc <DMA_CalcBaseAndBitshift+0x34>)
 80009b0:	fba1 1303 	umull	r1, r3, r1, r3
 80009b4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80009b6:	490a      	ldr	r1, [pc, #40]	; (80009e0 <DMA_CalcBaseAndBitshift+0x38>)
 80009b8:	5cc9      	ldrb	r1, [r1, r3]
 80009ba:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d806      	bhi.n	80009ce <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80009c0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80009c4:	f022 0203 	bic.w	r2, r2, #3
 80009c8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80009ca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80009cc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80009ce:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80009d2:	f022 0203 	bic.w	r2, r2, #3
 80009d6:	3204      	adds	r2, #4
 80009d8:	6582      	str	r2, [r0, #88]	; 0x58
 80009da:	e7f6      	b.n	80009ca <DMA_CalcBaseAndBitshift+0x22>
 80009dc:	aaaaaaab 	.word	0xaaaaaaab
 80009e0:	080022cc 	.word	0x080022cc

080009e4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80009e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009e6:	6982      	ldr	r2, [r0, #24]
 80009e8:	b992      	cbnz	r2, 8000a10 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d00a      	beq.n	8000a04 <DMA_CheckFifoParam+0x20>
 80009ee:	b11b      	cbz	r3, 80009f8 <DMA_CheckFifoParam+0x14>
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d001      	beq.n	80009f8 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80009f4:	2000      	movs	r0, #0
 80009f6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80009fe:	d12c      	bne.n	8000a5a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8000a00:	2000      	movs	r0, #0
 8000a02:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000a04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000a0a:	d028      	beq.n	8000a5e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000a10:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000a14:	d005      	beq.n	8000a22 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d929      	bls.n	8000a6e <DMA_CheckFifoParam+0x8a>
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d015      	beq.n	8000a4a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8000a1e:	2000      	movs	r0, #0
 8000a20:	4770      	bx	lr
    switch (tmp)
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d803      	bhi.n	8000a2e <DMA_CheckFifoParam+0x4a>
 8000a26:	e8df f003 	tbb	[pc, r3]
 8000a2a:	041c      	.short	0x041c
 8000a2c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8000a2e:	2000      	movs	r0, #0
 8000a30:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000a32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000a38:	d115      	bne.n	8000a66 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000a3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000a44:	d011      	beq.n	8000a6a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8000a46:	2000      	movs	r0, #0
 8000a48:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000a4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000a50:	d001      	beq.n	8000a56 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8000a52:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000a54:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8000a56:	2000      	movs	r0, #0
 8000a58:	4770      	bx	lr
        status = HAL_ERROR;
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	4770      	bx	lr
        status = HAL_ERROR;
 8000a5e:	2001      	movs	r0, #1
 8000a60:	4770      	bx	lr
      status = HAL_ERROR;
 8000a62:	2001      	movs	r0, #1
 8000a64:	4770      	bx	lr
        status = HAL_ERROR;
 8000a66:	2001      	movs	r0, #1
 8000a68:	4770      	bx	lr
        status = HAL_ERROR;
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	4770      	bx	lr
      status = HAL_ERROR;
 8000a6e:	2001      	movs	r0, #1
 8000a70:	4770      	bx	lr
	...

08000a74 <HAL_DMA_Init>:
{
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff ff26 	bl	80008c8 <HAL_GetTick>
  if(hdma == NULL)
 8000a7c:	2c00      	cmp	r4, #0
 8000a7e:	d05b      	beq.n	8000b38 <HAL_DMA_Init+0xc4>
 8000a80:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000a82:	2300      	movs	r3, #0
 8000a84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000a8e:	6822      	ldr	r2, [r4, #0]
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	f012 0f01 	tst.w	r2, #1
 8000aa0:	d00a      	beq.n	8000ab8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000aa2:	f7ff ff11 	bl	80008c8 <HAL_GetTick>
 8000aa6:	1b40      	subs	r0, r0, r5
 8000aa8:	2805      	cmp	r0, #5
 8000aaa:	d9f5      	bls.n	8000a98 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000aac:	2320      	movs	r3, #32
 8000aae:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000ab8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000aba:	4820      	ldr	r0, [pc, #128]	; (8000b3c <HAL_DMA_Init+0xc8>)
 8000abc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000abe:	6861      	ldr	r1, [r4, #4]
 8000ac0:	68a2      	ldr	r2, [r4, #8]
 8000ac2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ac4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ac6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ac8:	6921      	ldr	r1, [r4, #16]
 8000aca:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000acc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ace:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad0:	69a1      	ldr	r1, [r4, #24]
 8000ad2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ad4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ad8:	6a21      	ldr	r1, [r4, #32]
 8000ada:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000adc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ade:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000ae0:	2904      	cmp	r1, #4
 8000ae2:	d01e      	beq.n	8000b22 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000ae4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000ae6:	6826      	ldr	r6, [r4, #0]
 8000ae8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000aea:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000af0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d107      	bne.n	8000b06 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000af6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000af8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000afa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000afc:	b11b      	cbz	r3, 8000b06 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000afe:	4620      	mov	r0, r4
 8000b00:	f7ff ff70 	bl	80009e4 <DMA_CheckFifoParam>
 8000b04:	b990      	cbnz	r0, 8000b2c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000b06:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f7ff ff4d 	bl	80009a8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b10:	233f      	movs	r3, #63	; 0x3f
 8000b12:	4093      	lsls	r3, r2
 8000b14:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b16:	2000      	movs	r0, #0
 8000b18:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b20:	e7c9      	b.n	8000ab6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000b24:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000b26:	4301      	orrs	r1, r0
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	e7db      	b.n	8000ae4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b2c:	2340      	movs	r3, #64	; 0x40
 8000b2e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000b30:	2001      	movs	r0, #1
 8000b32:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000b36:	e7be      	b.n	8000ab6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000b38:	2001      	movs	r0, #1
 8000b3a:	e7bc      	b.n	8000ab6 <HAL_DMA_Init+0x42>
 8000b3c:	f010803f 	.word	0xf010803f

08000b40 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b40:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d003      	beq.n	8000b52 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b4e:	2001      	movs	r0, #1
 8000b50:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b52:	2305      	movs	r3, #5
 8000b54:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000b58:	6802      	ldr	r2, [r0, #0]
 8000b5a:	6813      	ldr	r3, [r2, #0]
 8000b5c:	f023 0301 	bic.w	r3, r3, #1
 8000b60:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000b62:	2000      	movs	r0, #0
}
 8000b64:	4770      	bx	lr
	...

08000b68 <HAL_DMA_IRQHandler>:
{
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b72:	4b72      	ldr	r3, [pc, #456]	; (8000d3c <HAL_DMA_IRQHandler+0x1d4>)
 8000b74:	681d      	ldr	r5, [r3, #0]
 8000b76:	4b72      	ldr	r3, [pc, #456]	; (8000d40 <HAL_DMA_IRQHandler+0x1d8>)
 8000b78:	fba3 3505 	umull	r3, r5, r3, r5
 8000b7c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b7e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000b80:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b82:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000b84:	2308      	movs	r3, #8
 8000b86:	4093      	lsls	r3, r2
 8000b88:	4233      	tst	r3, r6
 8000b8a:	d010      	beq.n	8000bae <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b8c:	6803      	ldr	r3, [r0, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	f012 0f04 	tst.w	r2, #4
 8000b94:	d00b      	beq.n	8000bae <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	f022 0204 	bic.w	r2, r2, #4
 8000b9c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b9e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	4093      	lsls	r3, r2
 8000ba4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ba6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	4233      	tst	r3, r6
 8000bb6:	d009      	beq.n	8000bcc <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000bb8:	6822      	ldr	r2, [r4, #0]
 8000bba:	6952      	ldr	r2, [r2, #20]
 8000bbc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000bc0:	d004      	beq.n	8000bcc <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000bc2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000bc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bcc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000bce:	2304      	movs	r3, #4
 8000bd0:	4093      	lsls	r3, r2
 8000bd2:	4233      	tst	r3, r6
 8000bd4:	d009      	beq.n	8000bea <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bd6:	6822      	ldr	r2, [r4, #0]
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	f012 0f02 	tst.w	r2, #2
 8000bde:	d004      	beq.n	8000bea <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000be0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000be2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000bea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000bec:	2310      	movs	r3, #16
 8000bee:	4093      	lsls	r3, r2
 8000bf0:	4233      	tst	r3, r6
 8000bf2:	d024      	beq.n	8000c3e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bf4:	6822      	ldr	r2, [r4, #0]
 8000bf6:	6812      	ldr	r2, [r2, #0]
 8000bf8:	f012 0f08 	tst.w	r2, #8
 8000bfc:	d01f      	beq.n	8000c3e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bfe:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000c08:	d00d      	beq.n	8000c26 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000c10:	d104      	bne.n	8000c1c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c14:	b19b      	cbz	r3, 8000c3e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000c16:	4620      	mov	r0, r4
 8000c18:	4798      	blx	r3
 8000c1a:	e010      	b.n	8000c3e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c1e:	b173      	cbz	r3, 8000c3e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000c20:	4620      	mov	r0, r4
 8000c22:	4798      	blx	r3
 8000c24:	e00b      	b.n	8000c3e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000c2c:	d103      	bne.n	8000c36 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f022 0208 	bic.w	r2, r2, #8
 8000c34:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c38:	b10b      	cbz	r3, 8000c3e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000c40:	2320      	movs	r3, #32
 8000c42:	4093      	lsls	r3, r2
 8000c44:	4233      	tst	r3, r6
 8000c46:	d055      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c48:	6822      	ldr	r2, [r4, #0]
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	f012 0f10 	tst.w	r2, #16
 8000c50:	d050      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c52:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c54:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b05      	cmp	r3, #5
 8000c5c:	d00e      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000c66:	d033      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000c6e:	d12a      	bne.n	8000cc6 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d03e      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000c76:	4620      	mov	r0, r4
 8000c78:	4798      	blx	r3
 8000c7a:	e03b      	b.n	8000cf4 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c7c:	6822      	ldr	r2, [r4, #0]
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	f023 0316 	bic.w	r3, r3, #22
 8000c84:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c86:	6822      	ldr	r2, [r4, #0]
 8000c88:	6953      	ldr	r3, [r2, #20]
 8000c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c8e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c92:	b1a3      	cbz	r3, 8000cbe <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c94:	6822      	ldr	r2, [r4, #0]
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	f023 0308 	bic.w	r3, r3, #8
 8000c9c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ca0:	233f      	movs	r3, #63	; 0x3f
 8000ca2:	4093      	lsls	r3, r2
 8000ca4:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000cb2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d03f      	beq.n	8000d38 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4798      	blx	r3
 8000cbc:	e03c      	b.n	8000d38 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cbe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1e7      	bne.n	8000c94 <HAL_DMA_IRQHandler+0x12c>
 8000cc4:	e7eb      	b.n	8000c9e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000cc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000cc8:	b1a3      	cbz	r3, 8000cf4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000cca:	4620      	mov	r0, r4
 8000ccc:	4798      	blx	r3
 8000cce:	e011      	b.n	8000cf4 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000cd6:	d109      	bne.n	8000cec <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f022 0210 	bic.w	r2, r2, #16
 8000cde:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000cee:	b10b      	cbz	r3, 8000cf4 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cf6:	b1fb      	cbz	r3, 8000d38 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000cf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cfa:	f013 0f01 	tst.w	r3, #1
 8000cfe:	d017      	beq.n	8000d30 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d00:	2305      	movs	r3, #5
 8000d02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000d06:	6822      	ldr	r2, [r4, #0]
 8000d08:	6813      	ldr	r3, [r2, #0]
 8000d0a:	f023 0301 	bic.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000d10:	9b01      	ldr	r3, [sp, #4]
 8000d12:	3301      	adds	r3, #1
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	42ab      	cmp	r3, r5
 8000d18:	d804      	bhi.n	8000d24 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f013 0f01 	tst.w	r3, #1
 8000d22:	d1f5      	bne.n	8000d10 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000d24:	2300      	movs	r3, #0
 8000d26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000d30:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d32:	b10b      	cbz	r3, 8000d38 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000d34:	4620      	mov	r0, r4
 8000d36:	4798      	blx	r3
}
 8000d38:	b003      	add	sp, #12
 8000d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	1b4e81b5 	.word	0x1b4e81b5

08000d44 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	2b0f      	cmp	r3, #15
 8000d48:	f200 80c5 	bhi.w	8000ed6 <HAL_GPIO_Init+0x192>
{
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	e039      	b.n	8000dc6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d52:	2204      	movs	r2, #4
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x14>
 8000d56:	2200      	movs	r2, #0
 8000d58:	40aa      	lsls	r2, r5
 8000d5a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d5c:	3402      	adds	r4, #2
 8000d5e:	4d5e      	ldr	r5, [pc, #376]	; (8000ed8 <HAL_GPIO_Init+0x194>)
 8000d60:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d64:	4a5d      	ldr	r2, [pc, #372]	; (8000edc <HAL_GPIO_Init+0x198>)
 8000d66:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	43f2      	mvns	r2, r6
 8000d6a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6e:	684f      	ldr	r7, [r1, #4]
 8000d70:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000d74:	d001      	beq.n	8000d7a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000d76:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8000d7a:	4c58      	ldr	r4, [pc, #352]	; (8000edc <HAL_GPIO_Init+0x198>)
 8000d7c:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000d7e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d84:	684f      	ldr	r7, [r1, #4]
 8000d86:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000d8a:	d001      	beq.n	8000d90 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000d8c:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8000d90:	4c52      	ldr	r4, [pc, #328]	; (8000edc <HAL_GPIO_Init+0x198>)
 8000d92:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d94:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d96:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9a:	684f      	ldr	r7, [r1, #4]
 8000d9c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000da0:	d001      	beq.n	8000da6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000da2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8000da6:	4c4d      	ldr	r4, [pc, #308]	; (8000edc <HAL_GPIO_Init+0x198>)
 8000da8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000daa:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000dac:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dae:	684d      	ldr	r5, [r1, #4]
 8000db0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8000db4:	d001      	beq.n	8000dba <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000db6:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8000dba:	4c48      	ldr	r4, [pc, #288]	; (8000edc <HAL_GPIO_Init+0x198>)
 8000dbc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	f200 8086 	bhi.w	8000ed2 <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	680c      	ldr	r4, [r1, #0]
 8000dcc:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8000dd0:	42b2      	cmp	r2, r6
 8000dd2:	d1f4      	bne.n	8000dbe <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd4:	684c      	ldr	r4, [r1, #4]
 8000dd6:	1e65      	subs	r5, r4, #1
 8000dd8:	2d01      	cmp	r5, #1
 8000dda:	d903      	bls.n	8000de4 <HAL_GPIO_Init+0xa0>
 8000ddc:	2c11      	cmp	r4, #17
 8000dde:	d001      	beq.n	8000de4 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de0:	2c12      	cmp	r4, #18
 8000de2:	d112      	bne.n	8000e0a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8000de4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de6:	005f      	lsls	r7, r3, #1
 8000de8:	2403      	movs	r4, #3
 8000dea:	40bc      	lsls	r4, r7
 8000dec:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df0:	68cc      	ldr	r4, [r1, #12]
 8000df2:	40bc      	lsls	r4, r7
 8000df4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000df6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000df8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfa:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dfe:	684c      	ldr	r4, [r1, #4]
 8000e00:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000e04:	409a      	lsls	r2, r3
 8000e06:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000e08:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e0a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0c:	005f      	lsls	r7, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	40ba      	lsls	r2, r7
 8000e12:	43d2      	mvns	r2, r2
 8000e14:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e16:	688d      	ldr	r5, [r1, #8]
 8000e18:	40bd      	lsls	r5, r7
 8000e1a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8000e1c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1e:	684c      	ldr	r4, [r1, #4]
 8000e20:	2c02      	cmp	r4, #2
 8000e22:	d001      	beq.n	8000e28 <HAL_GPIO_Init+0xe4>
 8000e24:	2c12      	cmp	r4, #18
 8000e26:	d113      	bne.n	8000e50 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	08dd      	lsrs	r5, r3, #3
 8000e2a:	3508      	adds	r5, #8
 8000e2c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e30:	f003 0407 	and.w	r4, r3, #7
 8000e34:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000e38:	240f      	movs	r4, #15
 8000e3a:	fa04 f40c 	lsl.w	r4, r4, ip
 8000e3e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e42:	690c      	ldr	r4, [r1, #16]
 8000e44:	fa04 f40c 	lsl.w	r4, r4, ip
 8000e48:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000e4c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000e50:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e52:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e54:	684c      	ldr	r4, [r1, #4]
 8000e56:	f004 0403 	and.w	r4, r4, #3
 8000e5a:	40bc      	lsls	r4, r7
 8000e5c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000e5e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e60:	684a      	ldr	r2, [r1, #4]
 8000e62:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000e66:	d0aa      	beq.n	8000dbe <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	2200      	movs	r2, #0
 8000e6a:	9201      	str	r2, [sp, #4]
 8000e6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <HAL_GPIO_Init+0x19c>)
 8000e6e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000e70:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000e74:	6454      	str	r4, [r2, #68]	; 0x44
 8000e76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e78:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e7c:	9201      	str	r2, [sp, #4]
 8000e7e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e80:	089c      	lsrs	r4, r3, #2
 8000e82:	1ca5      	adds	r5, r4, #2
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_GPIO_Init+0x194>)
 8000e86:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e8a:	f003 0203 	and.w	r2, r3, #3
 8000e8e:	0095      	lsls	r5, r2, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	40aa      	lsls	r2, r5
 8000e94:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e98:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <HAL_GPIO_Init+0x1a0>)
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	f43f af5b 	beq.w	8000d56 <HAL_GPIO_Init+0x12>
 8000ea0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ea4:	4290      	cmp	r0, r2
 8000ea6:	d00e      	beq.n	8000ec6 <HAL_GPIO_Init+0x182>
 8000ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eac:	4290      	cmp	r0, r2
 8000eae:	d00c      	beq.n	8000eca <HAL_GPIO_Init+0x186>
 8000eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	d00a      	beq.n	8000ece <HAL_GPIO_Init+0x18a>
 8000eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ebc:	4290      	cmp	r0, r2
 8000ebe:	f43f af48 	beq.w	8000d52 <HAL_GPIO_Init+0xe>
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	e748      	b.n	8000d58 <HAL_GPIO_Init+0x14>
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	e746      	b.n	8000d58 <HAL_GPIO_Init+0x14>
 8000eca:	2202      	movs	r2, #2
 8000ecc:	e744      	b.n	8000d58 <HAL_GPIO_Init+0x14>
 8000ece:	2203      	movs	r2, #3
 8000ed0:	e742      	b.n	8000d58 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000ed2:	b003      	add	sp, #12
 8000ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed6:	4770      	bx	lr
 8000ed8:	40013800 	.word	0x40013800
 8000edc:	40013c00 	.word	0x40013c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	f000 80bf 	beq.w	800106c <HAL_I2S_Init+0x184>
{
 8000eee:	b570      	push	{r4, r5, r6, lr}
 8000ef0:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000ef2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d051      	beq.n	8000f9e <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000efa:	2202      	movs	r2, #2
 8000efc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000f00:	6821      	ldr	r1, [r4, #0]
 8000f02:	69cb      	ldr	r3, [r1, #28]
 8000f04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000f08:	f023 030f 	bic.w	r3, r3, #15
 8000f0c:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000f12:	6963      	ldr	r3, [r4, #20]
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d063      	beq.n	8000fe0 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000f18:	68e3      	ldr	r3, [r4, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d146      	bne.n	8000fac <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000f1e:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000f20:	68a3      	ldr	r3, [r4, #8]
 8000f22:	2b20      	cmp	r3, #32
 8000f24:	d800      	bhi.n	8000f28 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000f26:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 fead 	bl	8001c88 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000f2e:	6923      	ldr	r3, [r4, #16]
 8000f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f34:	d03c      	beq.n	8000fb0 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000f36:	fbb0 f0f5 	udiv	r0, r0, r5
 8000f3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f3e:	0043      	lsls	r3, r0, #1
 8000f40:	6962      	ldr	r2, [r4, #20]
 8000f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f46:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000f48:	4a49      	ldr	r2, [pc, #292]	; (8001070 <HAL_I2S_Init+0x188>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000f50:	f003 0201 	and.w	r2, r3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000f58:	0212      	lsls	r2, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000f5a:	1e99      	subs	r1, r3, #2
 8000f5c:	29fd      	cmp	r1, #253	; 0xfd
 8000f5e:	d841      	bhi.n	8000fe4 <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000f60:	6921      	ldr	r1, [r4, #16]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	6821      	ldr	r1, [r4, #0]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000f6a:	6821      	ldr	r1, [r4, #0]
 8000f6c:	69cb      	ldr	r3, [r1, #28]
 8000f6e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000f72:	f023 030f 	bic.w	r3, r3, #15
 8000f76:	6862      	ldr	r2, [r4, #4]
 8000f78:	68a0      	ldr	r0, [r4, #8]
 8000f7a:	4302      	orrs	r2, r0
 8000f7c:	68e0      	ldr	r0, [r4, #12]
 8000f7e:	4302      	orrs	r2, r0
 8000f80:	69a0      	ldr	r0, [r4, #24]
 8000f82:	4302      	orrs	r2, r0
 8000f84:	4313      	orrs	r3, r2
 8000f86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f8a:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8000f8c:	6a23      	ldr	r3, [r4, #32]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d02e      	beq.n	8000ff0 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000f92:	2000      	movs	r0, #0
 8000f94:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8000f9c:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8000f9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <HAL_I2S_Init+0x18c>)
 8000fa4:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8000fa6:	f7ff fb7f 	bl	80006a8 <HAL_I2S_MspInit>
 8000faa:	e7a6      	b.n	8000efa <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8000fac:	2520      	movs	r5, #32
 8000fae:	e7b7      	b.n	8000f20 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000fb0:	68e3      	ldr	r3, [r4, #12]
 8000fb2:	b153      	cbz	r3, 8000fca <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000fb4:	00ad      	lsls	r5, r5, #2
 8000fb6:	fbb0 f0f5 	udiv	r0, r0, r5
 8000fba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fbe:	0043      	lsls	r3, r0, #1
 8000fc0:	6962      	ldr	r2, [r4, #20]
 8000fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fc6:	3305      	adds	r3, #5
 8000fc8:	e7be      	b.n	8000f48 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000fca:	00ed      	lsls	r5, r5, #3
 8000fcc:	fbb0 f0f5 	udiv	r0, r0, r5
 8000fd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fd4:	0043      	lsls	r3, r0, #1
 8000fd6:	6962      	ldr	r2, [r4, #20]
 8000fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fdc:	3305      	adds	r3, #5
 8000fde:	e7b3      	b.n	8000f48 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	e7ba      	b.n	8000f5a <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000fe4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
 8000fee:	e7d5      	b.n	8000f9c <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <HAL_I2S_Init+0x190>)
 8000ff2:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000ff4:	6822      	ldr	r2, [r4, #0]
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <HAL_I2S_Init+0x194>)
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d01f      	beq.n	800103c <HAL_I2S_Init+0x154>
 8000ffc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001000:	69d3      	ldr	r3, [r2, #28]
 8001002:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001006:	f023 030f 	bic.w	r3, r3, #15
 800100a:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800100c:	6822      	ldr	r2, [r4, #0]
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_I2S_Init+0x194>)
 8001010:	429a      	cmp	r2, r3
 8001012:	d015      	beq.n	8001040 <HAL_I2S_Init+0x158>
 8001014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001018:	2202      	movs	r2, #2
 800101a:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800101c:	6822      	ldr	r2, [r4, #0]
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_I2S_Init+0x194>)
 8001020:	429a      	cmp	r2, r3
 8001022:	d010      	beq.n	8001046 <HAL_I2S_Init+0x15e>
 8001024:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 8001028:	69ca      	ldr	r2, [r1, #28]
 800102a:	b292      	uxth	r2, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800102c:	6863      	ldr	r3, [r4, #4]
 800102e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001032:	d00a      	beq.n	800104a <HAL_I2S_Init+0x162>
 8001034:	b9c3      	cbnz	r3, 8001068 <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 8001036:	f44f 7680 	mov.w	r6, #256	; 0x100
 800103a:	e008      	b.n	800104e <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_I2S_Init+0x198>)
 800103e:	e7df      	b.n	8001000 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001040:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001044:	e7e8      	b.n	8001018 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <HAL_I2S_Init+0x198>)
 8001048:	e7ee      	b.n	8001028 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 800104a:	f44f 7680 	mov.w	r6, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800104e:	68a0      	ldr	r0, [r4, #8]
 8001050:	68e5      	ldr	r5, [r4, #12]
                                    (uint16_t)hi2s->Init.CPOL))));
 8001052:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001054:	432b      	orrs	r3, r5
 8001056:	b29b      	uxth	r3, r3
 8001058:	4303      	orrs	r3, r0
 800105a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800105c:	4333      	orrs	r3, r6
 800105e:	4313      	orrs	r3, r2
 8001060:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001064:	61cb      	str	r3, [r1, #28]
 8001066:	e794      	b.n	8000f92 <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 8001068:	2600      	movs	r6, #0
 800106a:	e7f0      	b.n	800104e <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 800106c:	2001      	movs	r0, #1
}
 800106e:	4770      	bx	lr
 8001070:	cccccccd 	.word	0xcccccccd
 8001074:	080010f7 	.word	0x080010f7
 8001078:	08001301 	.word	0x08001301
 800107c:	40003800 	.word	0x40003800
 8001080:	40003400 	.word	0x40003400

08001084 <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001084:	4770      	bx	lr

08001086 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001086:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001088:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800108a:	6803      	ldr	r3, [r0, #0]
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001090:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001092:	3302      	adds	r3, #2
 8001094:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 8001096:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001098:	3b01      	subs	r3, #1
 800109a:	b29b      	uxth	r3, r3
 800109c:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800109e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	b103      	cbz	r3, 80010a6 <I2S_Transmit_IT+0x20>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80010a4:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80010a6:	6802      	ldr	r2, [r0, #0]
 80010a8:	6853      	ldr	r3, [r2, #4]
 80010aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80010ae:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80010b6:	f7ff ffe5 	bl	8001084 <HAL_I2S_TxCpltCallback>
}
 80010ba:	e7f3      	b.n	80010a4 <I2S_Transmit_IT+0x1e>

080010bc <HAL_I2S_RxCpltCallback>:
}
 80010bc:	4770      	bx	lr

080010be <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80010be:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80010c0:	6803      	ldr	r3, [r0, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010c6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80010c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010ca:	3302      	adds	r3, #2
 80010cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80010ce:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80010d6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b103      	cbz	r3, 80010de <I2S_Receive_IT+0x20>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80010dc:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80010de:	6802      	ldr	r2, [r0, #0]
 80010e0:	6853      	ldr	r3, [r2, #4]
 80010e2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80010e6:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80010ee:	f7ff ffe5 	bl	80010bc <HAL_I2S_RxCpltCallback>
}
 80010f2:	e7f3      	b.n	80010dc <I2S_Receive_IT+0x1e>

080010f4 <HAL_I2S_ErrorCallback>:
}
 80010f4:	4770      	bx	lr

080010f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80010f6:	b510      	push	{r4, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80010fc:	6802      	ldr	r2, [r0, #0]
 80010fe:	6893      	ldr	r3, [r2, #8]
 8001100:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001102:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b04      	cmp	r3, #4
 800110a:	d006      	beq.n	800111a <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800110c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b03      	cmp	r3, #3
 8001114:	d02c      	beq.n	8001170 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001116:	b004      	add	sp, #16
 8001118:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800111a:	9b03      	ldr	r3, [sp, #12]
 800111c:	f013 0f01 	tst.w	r3, #1
 8001120:	d003      	beq.n	800112a <I2S_IRQHandler+0x34>
 8001122:	6853      	ldr	r3, [r2, #4]
 8001124:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001128:	d11f      	bne.n	800116a <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800112a:	9b03      	ldr	r3, [sp, #12]
 800112c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001130:	d0ec      	beq.n	800110c <I2S_IRQHandler+0x16>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	f012 0f20 	tst.w	r2, #32
 800113a:	d0e7      	beq.n	800110c <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001142:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001144:	2300      	movs	r3, #0
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	9201      	str	r2, [sp, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001154:	2301      	movs	r3, #1
 8001156:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800115a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff ffc6 	bl	80010f4 <HAL_I2S_ErrorCallback>
 8001168:	e7d0      	b.n	800110c <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 800116a:	f7ff ffa8 	bl	80010be <I2S_Receive_IT>
 800116e:	e7dc      	b.n	800112a <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001170:	9b03      	ldr	r3, [sp, #12]
 8001172:	f013 0f02 	tst.w	r3, #2
 8001176:	d004      	beq.n	8001182 <I2S_IRQHandler+0x8c>
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001180:	d11d      	bne.n	80011be <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	f013 0f08 	tst.w	r3, #8
 8001188:	d0c5      	beq.n	8001116 <I2S_IRQHandler+0x20>
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	f012 0f20 	tst.w	r2, #32
 8001192:	d0c0      	beq.n	8001116 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800119a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800119c:	2300      	movs	r3, #0
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80011ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff ff9c 	bl	80010f4 <HAL_I2S_ErrorCallback>
}
 80011bc:	e7ab      	b.n	8001116 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff ff61 	bl	8001086 <I2S_Transmit_IT>
 80011c4:	e7dd      	b.n	8001182 <I2S_IRQHandler+0x8c>

080011c6 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80011c6:	4770      	bx	lr

080011c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80011c8:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80011ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011cc:	1c9a      	adds	r2, r3, #2
 80011ce:	6242      	str	r2, [r0, #36]	; 0x24
 80011d0:	6802      	ldr	r2, [r0, #0]
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80011d6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80011d8:	3b01      	subs	r3, #1
 80011da:	b29b      	uxth	r3, r3
 80011dc:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80011de:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	b93b      	cbnz	r3, 80011f4 <I2SEx_TxISR_I2S+0x2c>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80011e4:	6802      	ldr	r2, [r0, #0]
 80011e6:	6853      	ldr	r3, [r2, #4]
 80011e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80011ec:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 80011ee:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b103      	cbz	r3, 80011f6 <I2SEx_TxISR_I2S+0x2e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80011f4:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80011fc:	f7ff ffe3 	bl	80011c6 <HAL_I2SEx_TxRxCpltCallback>
}
 8001200:	e7f8      	b.n	80011f4 <I2SEx_TxISR_I2S+0x2c>
	...

08001204 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001204:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001206:	6802      	ldr	r2, [r0, #0]
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <I2SEx_RxISR_I2SExt+0x58>)
 800120a:	429a      	cmp	r2, r3
 800120c:	d01b      	beq.n	8001246 <I2SEx_RxISR_I2SExt+0x42>
 800120e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001216:	1c99      	adds	r1, r3, #2
 8001218:	62c1      	str	r1, [r0, #44]	; 0x2c
 800121a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800121c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800121e:	3b01      	subs	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001224:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001226:	b29b      	uxth	r3, r3
 8001228:	b963      	cbnz	r3, 8001244 <I2SEx_RxISR_I2SExt+0x40>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800122a:	6802      	ldr	r2, [r0, #0]
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <I2SEx_RxISR_I2SExt+0x58>)
 800122e:	429a      	cmp	r2, r3
 8001230:	d00c      	beq.n	800124c <I2SEx_RxISR_I2SExt+0x48>
 8001232:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001236:	6853      	ldr	r3, [r2, #4]
 8001238:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800123c:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 800123e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001240:	b29b      	uxth	r3, r3
 8001242:	b12b      	cbz	r3, 8001250 <I2SEx_RxISR_I2SExt+0x4c>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001244:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001246:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800124a:	e7e2      	b.n	8001212 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <I2SEx_RxISR_I2SExt+0x5c>)
 800124e:	e7f2      	b.n	8001236 <I2SEx_RxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8001250:	2301      	movs	r3, #1
 8001252:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001256:	f7ff ffb6 	bl	80011c6 <HAL_I2SEx_TxRxCpltCallback>
}
 800125a:	e7f3      	b.n	8001244 <I2SEx_RxISR_I2SExt+0x40>
 800125c:	40003800 	.word	0x40003800
 8001260:	40003400 	.word	0x40003400

08001264 <I2SEx_TxISR_I2SExt>:
{
 8001264:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001266:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001268:	1c9a      	adds	r2, r3, #2
 800126a:	6242      	str	r2, [r0, #36]	; 0x24
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	6801      	ldr	r1, [r0, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <I2SEx_TxISR_I2SExt+0x58>)
 8001272:	4299      	cmp	r1, r3
 8001274:	d017      	beq.n	80012a6 <I2SEx_TxISR_I2SExt+0x42>
 8001276:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800127a:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800127c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800127e:	3b01      	subs	r3, #1
 8001280:	b29b      	uxth	r3, r3
 8001282:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001284:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001286:	b29b      	uxth	r3, r3
 8001288:	b963      	cbnz	r3, 80012a4 <I2SEx_TxISR_I2SExt+0x40>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800128a:	6802      	ldr	r2, [r0, #0]
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <I2SEx_TxISR_I2SExt+0x58>)
 800128e:	429a      	cmp	r2, r3
 8001290:	d00c      	beq.n	80012ac <I2SEx_TxISR_I2SExt+0x48>
 8001292:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001296:	6853      	ldr	r3, [r2, #4]
 8001298:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800129c:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 800129e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b12b      	cbz	r3, 80012b0 <I2SEx_TxISR_I2SExt+0x4c>
}
 80012a4:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80012a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80012aa:	e7e6      	b.n	800127a <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <I2SEx_TxISR_I2SExt+0x5c>)
 80012ae:	e7f2      	b.n	8001296 <I2SEx_TxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80012b6:	f7ff ff86 	bl	80011c6 <HAL_I2SEx_TxRxCpltCallback>
}
 80012ba:	e7f3      	b.n	80012a4 <I2SEx_TxISR_I2SExt+0x40>
 80012bc:	40003800 	.word	0x40003800
 80012c0:	40003400 	.word	0x40003400

080012c4 <I2SEx_RxISR_I2S>:
{
 80012c4:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80012c6:	6803      	ldr	r3, [r0, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80012cc:	1c99      	adds	r1, r3, #2
 80012ce:	62c1      	str	r1, [r0, #44]	; 0x2c
 80012d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80012d2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80012da:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b93b      	cbnz	r3, 80012f0 <I2SEx_RxISR_I2S+0x2c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80012e0:	6802      	ldr	r2, [r0, #0]
 80012e2:	6853      	ldr	r3, [r2, #4]
 80012e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80012e8:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80012ea:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b103      	cbz	r3, 80012f2 <I2SEx_RxISR_I2S+0x2e>
}
 80012f0:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80012f8:	f7ff ff65 	bl	80011c6 <HAL_I2SEx_TxRxCpltCallback>
}
 80012fc:	e7f8      	b.n	80012f0 <I2SEx_RxISR_I2S+0x2c>
	...

08001300 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001300:	b510      	push	{r4, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001306:	6803      	ldr	r3, [r0, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800130c:	4a70      	ldr	r2, [pc, #448]	; (80014d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d06f      	beq.n	80013f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8001312:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001316:	6891      	ldr	r1, [r2, #8]
 8001318:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800131e:	6853      	ldr	r3, [r2, #4]
 8001320:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001322:	6863      	ldr	r3, [r4, #4]
 8001324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001328:	d001      	beq.n	800132e <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d170      	bne.n	8001410 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800132e:	9b05      	ldr	r3, [sp, #20]
 8001330:	f013 0f02 	tst.w	r3, #2
 8001334:	d003      	beq.n	800133e <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 8001336:	9b03      	ldr	r3, [sp, #12]
 8001338:	f013 0f80 	tst.w	r3, #128	; 0x80
 800133c:	d15c      	bne.n	80013f8 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800133e:	9b04      	ldr	r3, [sp, #16]
 8001340:	f013 0f01 	tst.w	r3, #1
 8001344:	d003      	beq.n	800134e <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8001346:	9b02      	ldr	r3, [sp, #8]
 8001348:	f013 0f40 	tst.w	r3, #64	; 0x40
 800134c:	d158      	bne.n	8001400 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800134e:	9b04      	ldr	r3, [sp, #16]
 8001350:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001354:	d024      	beq.n	80013a0 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 8001356:	9b02      	ldr	r3, [sp, #8]
 8001358:	f013 0f20 	tst.w	r3, #32
 800135c:	d020      	beq.n	80013a0 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001362:	429a      	cmp	r2, r3
 8001364:	d050      	beq.n	8001408 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8001366:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800136a:	6853      	ldr	r3, [r2, #4]
 800136c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001370:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001372:	6822      	ldr	r2, [r4, #0]
 8001374:	6853      	ldr	r3, [r2, #4]
 8001376:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800137a:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800137c:	2300      	movs	r3, #0
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	9200      	str	r2, [sp, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 800138c:	2301      	movs	r3, #1
 800138e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001392:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff feaa 	bl	80010f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80013a0:	9b05      	ldr	r3, [sp, #20]
 80013a2:	f013 0f08 	tst.w	r3, #8
 80013a6:	d022      	beq.n	80013ee <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 80013a8:	9b03      	ldr	r3, [sp, #12]
 80013aa:	f013 0f20 	tst.w	r3, #32
 80013ae:	d01e      	beq.n	80013ee <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013b0:	6822      	ldr	r2, [r4, #0]
 80013b2:	6853      	ldr	r3, [r2, #4]
 80013b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80013b8:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013ba:	6822      	ldr	r2, [r4, #0]
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80013be:	429a      	cmp	r2, r3
 80013c0:	d024      	beq.n	800140c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80013c2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80013c6:	6853      	ldr	r3, [r2, #4]
 80013c8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80013cc:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80013ce:	2300      	movs	r3, #0
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80013da:	2301      	movs	r3, #1
 80013dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80013e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff fe83 	bl	80010f4 <HAL_I2S_ErrorCallback>
}
 80013ee:	b006      	add	sp, #24
 80013f0:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80013f2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80013f6:	e78e      	b.n	8001316 <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff fee5 	bl	80011c8 <I2SEx_TxISR_I2S>
 80013fe:	e79e      	b.n	800133e <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff feff 	bl	8001204 <I2SEx_RxISR_I2SExt>
 8001406:	e7a2      	b.n	800134e <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001408:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800140a:	e7ae      	b.n	800136a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800140c:	4a31      	ldr	r2, [pc, #196]	; (80014d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800140e:	e7da      	b.n	80013c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001410:	9b04      	ldr	r3, [sp, #16]
 8001412:	f013 0f02 	tst.w	r3, #2
 8001416:	d003      	beq.n	8001420 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8001418:	9b02      	ldr	r3, [sp, #8]
 800141a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800141e:	d14a      	bne.n	80014b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001420:	9b05      	ldr	r3, [sp, #20]
 8001422:	f013 0f01 	tst.w	r3, #1
 8001426:	d003      	beq.n	8001430 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8001428:	9b03      	ldr	r3, [sp, #12]
 800142a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800142e:	d146      	bne.n	80014be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001430:	9b05      	ldr	r3, [sp, #20]
 8001432:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001436:	d01c      	beq.n	8001472 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8001438:	9b03      	ldr	r3, [sp, #12]
 800143a:	f013 0f20 	tst.w	r3, #32
 800143e:	d018      	beq.n	8001472 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001440:	6822      	ldr	r2, [r4, #0]
 8001442:	6853      	ldr	r3, [r2, #4]
 8001444:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001448:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800144a:	6822      	ldr	r2, [r4, #0]
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800144e:	429a      	cmp	r2, r3
 8001450:	d039      	beq.n	80014c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8001452:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001456:	6853      	ldr	r3, [r2, #4]
 8001458:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800145c:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800145e:	2301      	movs	r3, #1
 8001460:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001464:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff fe41 	bl	80010f4 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001472:	9b04      	ldr	r3, [sp, #16]
 8001474:	f013 0f08 	tst.w	r3, #8
 8001478:	d0b9      	beq.n	80013ee <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 800147a:	9b02      	ldr	r3, [sp, #8]
 800147c:	f013 0f20 	tst.w	r3, #32
 8001480:	d0b5      	beq.n	80013ee <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001486:	429a      	cmp	r2, r3
 8001488:	d01f      	beq.n	80014ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 800148a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800148e:	6853      	ldr	r3, [r2, #4]
 8001490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001494:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	6853      	ldr	r3, [r2, #4]
 800149a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800149e:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80014a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80014ae:	4620      	mov	r0, r4
 80014b0:	f7ff fe20 	bl	80010f4 <HAL_I2S_ErrorCallback>
}
 80014b4:	e79b      	b.n	80013ee <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fed4 	bl	8001264 <I2SEx_TxISR_I2SExt>
 80014bc:	e7b0      	b.n	8001420 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff ff00 	bl	80012c4 <I2SEx_RxISR_I2S>
 80014c4:	e7b4      	b.n	8001430 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014c6:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80014c8:	e7c5      	b.n	8001456 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014ca:	4a02      	ldr	r2, [pc, #8]	; (80014d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80014cc:	e7df      	b.n	800148e <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 80014ce:	bf00      	nop
 80014d0:	40003800 	.word	0x40003800
 80014d4:	40003400 	.word	0x40003400

080014d8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d8:	2800      	cmp	r0, #0
 80014da:	f000 81e4 	beq.w	80018a6 <HAL_RCC_OscConfig+0x3ce>
{
 80014de:	b570      	push	{r4, r5, r6, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e4:	6803      	ldr	r3, [r0, #0]
 80014e6:	f013 0f01 	tst.w	r3, #1
 80014ea:	d03b      	beq.n	8001564 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ec:	4ba7      	ldr	r3, [pc, #668]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d02c      	beq.n	8001552 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f8:	4ba4      	ldr	r3, [pc, #656]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001500:	2b08      	cmp	r3, #8
 8001502:	d021      	beq.n	8001548 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	6863      	ldr	r3, [r4, #4]
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150a:	d04f      	beq.n	80015ac <HAL_RCC_OscConfig+0xd4>
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001510:	d052      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe0>
 8001512:	4b9e      	ldr	r3, [pc, #632]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001522:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001524:	6863      	ldr	r3, [r4, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d050      	beq.n	80015cc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff f9cd 	bl	80008c8 <HAL_GetTick>
 800152e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001530:	4b96      	ldr	r3, [pc, #600]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001538:	d114      	bne.n	8001564 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153a:	f7ff f9c5 	bl	80008c8 <HAL_GetTick>
 800153e:	1b40      	subs	r0, r0, r5
 8001540:	2864      	cmp	r0, #100	; 0x64
 8001542:	d9f5      	bls.n	8001530 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001544:	2003      	movs	r0, #3
 8001546:	e1b3      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001548:	4b90      	ldr	r3, [pc, #576]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001550:	d0d8      	beq.n	8001504 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001552:	4b8e      	ldr	r3, [pc, #568]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800155a:	d003      	beq.n	8001564 <HAL_RCC_OscConfig+0x8c>
 800155c:	6863      	ldr	r3, [r4, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 81a3 	beq.w	80018aa <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	f013 0f02 	tst.w	r3, #2
 800156a:	d055      	beq.n	8001618 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156c:	4b87      	ldr	r3, [pc, #540]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f013 0f0c 	tst.w	r3, #12
 8001574:	d03e      	beq.n	80015f4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001576:	4b85      	ldr	r3, [pc, #532]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800157e:	2b08      	cmp	r3, #8
 8001580:	d033      	beq.n	80015ea <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001582:	68e3      	ldr	r3, [r4, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d068      	beq.n	800165a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001588:	4b81      	ldr	r3, [pc, #516]	; (8001790 <HAL_RCC_OscConfig+0x2b8>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff f99b 	bl	80008c8 <HAL_GetTick>
 8001592:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b7d      	ldr	r3, [pc, #500]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f013 0f02 	tst.w	r3, #2
 800159c:	d154      	bne.n	8001648 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff f993 	bl	80008c8 <HAL_GetTick>
 80015a2:	1b40      	subs	r0, r0, r5
 80015a4:	2802      	cmp	r0, #2
 80015a6:	d9f5      	bls.n	8001594 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80015a8:	2003      	movs	r0, #3
 80015aa:	e181      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ac:	4a77      	ldr	r2, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80015ae:	6813      	ldr	r3, [r2, #0]
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e7b5      	b.n	8001524 <HAL_RCC_OscConfig+0x4c>
 80015b8:	4b74      	ldr	r3, [pc, #464]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e7ab      	b.n	8001524 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80015cc:	f7ff f97c 	bl	80008c8 <HAL_GetTick>
 80015d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	4b6e      	ldr	r3, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015da:	d0c3      	beq.n	8001564 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff f974 	bl	80008c8 <HAL_GetTick>
 80015e0:	1b40      	subs	r0, r0, r5
 80015e2:	2864      	cmp	r0, #100	; 0x64
 80015e4:	d9f5      	bls.n	80015d2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80015e6:	2003      	movs	r0, #3
 80015e8:	e162      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b68      	ldr	r3, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015f2:	d1c6      	bne.n	8001582 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f4:	4b65      	ldr	r3, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f013 0f02 	tst.w	r3, #2
 80015fc:	d004      	beq.n	8001608 <HAL_RCC_OscConfig+0x130>
 80015fe:	68e3      	ldr	r3, [r4, #12]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001604:	2001      	movs	r0, #1
 8001606:	e153      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001608:	4a60      	ldr	r2, [pc, #384]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001610:	6921      	ldr	r1, [r4, #16]
 8001612:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001616:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	f013 0f08 	tst.w	r3, #8
 800161e:	d040      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001620:	6963      	ldr	r3, [r4, #20]
 8001622:	b363      	cbz	r3, 800167e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001624:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <HAL_RCC_OscConfig+0x2bc>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff f94d 	bl	80008c8 <HAL_GetTick>
 800162e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001630:	4b56      	ldr	r3, [pc, #344]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001634:	f013 0f02 	tst.w	r3, #2
 8001638:	d133      	bne.n	80016a2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff f945 	bl	80008c8 <HAL_GetTick>
 800163e:	1b40      	subs	r0, r0, r5
 8001640:	2802      	cmp	r0, #2
 8001642:	d9f5      	bls.n	8001630 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001644:	2003      	movs	r0, #3
 8001646:	e133      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4a50      	ldr	r2, [pc, #320]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001650:	6921      	ldr	r1, [r4, #16]
 8001652:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e7de      	b.n	8001618 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800165a:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <HAL_RCC_OscConfig+0x2b8>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001660:	f7ff f932 	bl	80008c8 <HAL_GetTick>
 8001664:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f013 0f02 	tst.w	r3, #2
 800166e:	d0d3      	beq.n	8001618 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff f92a 	bl	80008c8 <HAL_GetTick>
 8001674:	1b40      	subs	r0, r0, r5
 8001676:	2802      	cmp	r0, #2
 8001678:	d9f5      	bls.n	8001666 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800167a:	2003      	movs	r0, #3
 800167c:	e118      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167e:	4b45      	ldr	r3, [pc, #276]	; (8001794 <HAL_RCC_OscConfig+0x2bc>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff f920 	bl	80008c8 <HAL_GetTick>
 8001688:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168a:	4b40      	ldr	r3, [pc, #256]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 800168c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168e:	f013 0f02 	tst.w	r3, #2
 8001692:	d006      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff f918 	bl	80008c8 <HAL_GetTick>
 8001698:	1b40      	subs	r0, r0, r5
 800169a:	2802      	cmp	r0, #2
 800169c:	d9f5      	bls.n	800168a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800169e:	2003      	movs	r0, #3
 80016a0:	e106      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	f013 0f04 	tst.w	r3, #4
 80016a8:	d079      	beq.n	800179e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80016b2:	d133      	bne.n	800171c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80016ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016cc:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4b32      	ldr	r3, [pc, #200]	; (8001798 <HAL_RCC_OscConfig+0x2c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016d6:	d023      	beq.n	8001720 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	68a3      	ldr	r3, [r4, #8]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d034      	beq.n	8001748 <HAL_RCC_OscConfig+0x270>
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d038      	beq.n	8001754 <HAL_RCC_OscConfig+0x27c>
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80016e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	671a      	str	r2, [r3, #112]	; 0x70
 80016ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f4:	68a3      	ldr	r3, [r4, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d036      	beq.n	8001768 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7ff f8e5 	bl	80008c8 <HAL_GetTick>
 80016fe:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	f013 0f02 	tst.w	r3, #2
 8001708:	d148      	bne.n	800179c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff f8dd 	bl	80008c8 <HAL_GetTick>
 800170e:	1b80      	subs	r0, r0, r6
 8001710:	f241 3388 	movw	r3, #5000	; 0x1388
 8001714:	4298      	cmp	r0, r3
 8001716:	d9f3      	bls.n	8001700 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001718:	2003      	movs	r0, #3
 800171a:	e0c9      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 800171c:	2500      	movs	r5, #0
 800171e:	e7d6      	b.n	80016ce <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_RCC_OscConfig+0x2c0>)
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800172a:	f7ff f8cd 	bl	80008c8 <HAL_GetTick>
 800172e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_RCC_OscConfig+0x2c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001738:	d1ce      	bne.n	80016d8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173a:	f7ff f8c5 	bl	80008c8 <HAL_GetTick>
 800173e:	1b80      	subs	r0, r0, r6
 8001740:	2802      	cmp	r0, #2
 8001742:	d9f5      	bls.n	8001730 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001744:	2003      	movs	r0, #3
 8001746:	e0b3      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 800174a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
 8001752:	e7cf      	b.n	80016f4 <HAL_RCC_OscConfig+0x21c>
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001756:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001758:	f042 0204 	orr.w	r2, r2, #4
 800175c:	671a      	str	r2, [r3, #112]	; 0x70
 800175e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	671a      	str	r2, [r3, #112]	; 0x70
 8001766:	e7c5      	b.n	80016f4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff f8ae 	bl	80008c8 <HAL_GetTick>
 800176c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	f013 0f02 	tst.w	r3, #2
 8001776:	d011      	beq.n	800179c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff f8a6 	bl	80008c8 <HAL_GetTick>
 800177c:	1b80      	subs	r0, r0, r6
 800177e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001782:	4298      	cmp	r0, r3
 8001784:	d9f3      	bls.n	800176e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001786:	2003      	movs	r0, #3
 8001788:	e092      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	42470000 	.word	0x42470000
 8001794:	42470e80 	.word	0x42470e80
 8001798:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179c:	b9ed      	cbnz	r5, 80017da <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179e:	69a3      	ldr	r3, [r4, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 8084 	beq.w	80018ae <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a6:	4a45      	ldr	r2, [pc, #276]	; (80018bc <HAL_RCC_OscConfig+0x3e4>)
 80017a8:	6892      	ldr	r2, [r2, #8]
 80017aa:	f002 020c 	and.w	r2, r2, #12
 80017ae:	2a08      	cmp	r2, #8
 80017b0:	d051      	beq.n	8001856 <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d017      	beq.n	80017e6 <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <HAL_RCC_OscConfig+0x3e8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff f884 	bl	80008c8 <HAL_GetTick>
 80017c0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <HAL_RCC_OscConfig+0x3e4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017ca:	d042      	beq.n	8001852 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff f87c 	bl	80008c8 <HAL_GetTick>
 80017d0:	1b00      	subs	r0, r0, r4
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d9f5      	bls.n	80017c2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80017d6:	2003      	movs	r0, #3
 80017d8:	e06a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017da:	4a38      	ldr	r2, [pc, #224]	; (80018bc <HAL_RCC_OscConfig+0x3e4>)
 80017dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	e7db      	b.n	800179e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <HAL_RCC_OscConfig+0x3e8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017ec:	f7ff f86c 	bl	80008c8 <HAL_GetTick>
 80017f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_OscConfig+0x3e4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017fa:	d006      	beq.n	800180a <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f864 	bl	80008c8 <HAL_GetTick>
 8001800:	1b40      	subs	r0, r0, r5
 8001802:	2802      	cmp	r0, #2
 8001804:	d9f5      	bls.n	80017f2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8001806:	2003      	movs	r0, #3
 8001808:	e052      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180a:	69e3      	ldr	r3, [r4, #28]
 800180c:	6a22      	ldr	r2, [r4, #32]
 800180e:	4313      	orrs	r3, r2
 8001810:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001812:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001816:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001818:	0852      	lsrs	r2, r2, #1
 800181a:	3a01      	subs	r2, #1
 800181c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001820:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001822:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <HAL_RCC_OscConfig+0x3e4>)
 8001828:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_RCC_OscConfig+0x3e8>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001830:	f7ff f84a 	bl	80008c8 <HAL_GetTick>
 8001834:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_RCC_OscConfig+0x3e4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f842 	bl	80008c8 <HAL_GetTick>
 8001844:	1b00      	subs	r0, r0, r4
 8001846:	2802      	cmp	r0, #2
 8001848:	d9f5      	bls.n	8001836 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800184a:	2003      	movs	r0, #3
 800184c:	e030      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800184e:	2000      	movs	r0, #0
 8001850:	e02e      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
 8001852:	2000      	movs	r0, #0
 8001854:	e02c      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001856:	2b01      	cmp	r3, #1
 8001858:	d02c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_RCC_OscConfig+0x3e4>)
 800185c:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001862:	69e2      	ldr	r2, [r4, #28]
 8001864:	4291      	cmp	r1, r2
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
 800186a:	e021      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800186c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001870:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	428a      	cmp	r2, r1
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 8001876:	2001      	movs	r0, #1
 8001878:	e01a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800187a:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800187c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001880:	401a      	ands	r2, r3
 8001882:	428a      	cmp	r2, r1
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
 8001888:	e012      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800188a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800188e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001890:	428a      	cmp	r2, r1
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001898:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800189c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00a      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 80018a2:	2001      	movs	r0, #1
 80018a4:	e004      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
}
 80018a8:	4770      	bx	lr
        return HAL_ERROR;
 80018aa:	2001      	movs	r0, #1
 80018ac:	e000      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 80018ae:	2000      	movs	r0, #0
}
 80018b0:	b002      	add	sp, #8
 80018b2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80018b4:	2001      	movs	r0, #1
 80018b6:	e7fb      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 80018b8:	2000      	movs	r0, #0
 80018ba:	e7f9      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
 80018bc:	40023800 	.word	0x40023800
 80018c0:	42470060 	.word	0x42470060

080018c4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d044      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x96>
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4823      	ldr	r0, [pc, #140]	; (8001964 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018d6:	4770      	bx	lr
{
 80018d8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80018f4:	2300      	movs	r3, #0
 80018f6:	481c      	ldr	r0, [pc, #112]	; (8001968 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018f8:	fba1 0100 	umull	r0, r1, r1, r0
 80018fc:	f7fe fc6c 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001908:	3301      	adds	r3, #1
 800190a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800190c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001910:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800191c:	461e      	mov	r6, r3
 800191e:	2700      	movs	r7, #0
 8001920:	015c      	lsls	r4, r3, #5
 8001922:	2500      	movs	r5, #0
 8001924:	1ae4      	subs	r4, r4, r3
 8001926:	eb65 0507 	sbc.w	r5, r5, r7
 800192a:	01a9      	lsls	r1, r5, #6
 800192c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001930:	01a0      	lsls	r0, r4, #6
 8001932:	1b00      	subs	r0, r0, r4
 8001934:	eb61 0105 	sbc.w	r1, r1, r5
 8001938:	00cb      	lsls	r3, r1, #3
 800193a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800193e:	00c4      	lsls	r4, r0, #3
 8001940:	19a0      	adds	r0, r4, r6
 8001942:	eb43 0107 	adc.w	r1, r3, r7
 8001946:	028b      	lsls	r3, r1, #10
 8001948:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800194c:	0284      	lsls	r4, r0, #10
 800194e:	4620      	mov	r0, r4
 8001950:	4619      	mov	r1, r3
 8001952:	2300      	movs	r3, #0
 8001954:	f7fe fc40 	bl	80001d8 <__aeabi_uldivmod>
 8001958:	e7d2      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	017d7840 	.word	0x017d7840

0800196c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800196c:	2800      	cmp	r0, #0
 800196e:	f000 809e 	beq.w	8001aae <HAL_RCC_ClockConfig+0x142>
{
 8001972:	b570      	push	{r4, r5, r6, lr}
 8001974:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001976:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_ClockConfig+0x14c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	428b      	cmp	r3, r1
 8001980:	d209      	bcs.n	8001996 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	b2cb      	uxtb	r3, r1
 8001984:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_RCC_ClockConfig+0x14c>)
 8001986:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001988:	6813      	ldr	r3, [r2, #0]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	428b      	cmp	r3, r1
 8001990:	d001      	beq.n	8001996 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001992:	2001      	movs	r0, #1
}
 8001994:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	f013 0f02 	tst.w	r3, #2
 800199c:	d017      	beq.n	80019ce <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199e:	f013 0f04 	tst.w	r3, #4
 80019a2:	d004      	beq.n	80019ae <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4a45      	ldr	r2, [pc, #276]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 80019a6:	6893      	ldr	r3, [r2, #8]
 80019a8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ac:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f013 0f08 	tst.w	r3, #8
 80019b4:	d004      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b6:	4a41      	ldr	r2, [pc, #260]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 80019b8:	6893      	ldr	r3, [r2, #8]
 80019ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019be:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 80019c2:	6893      	ldr	r3, [r2, #8]
 80019c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c8:	68a0      	ldr	r0, [r4, #8]
 80019ca:	4303      	orrs	r3, r0
 80019cc:	6093      	str	r3, [r2, #8]
 80019ce:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	f013 0f01 	tst.w	r3, #1
 80019d6:	d032      	beq.n	8001a3e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d021      	beq.n	8001a22 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	1e9a      	subs	r2, r3, #2
 80019e0:	2a01      	cmp	r2, #1
 80019e2:	d925      	bls.n	8001a30 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4a35      	ldr	r2, [pc, #212]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	f012 0f02 	tst.w	r2, #2
 80019ec:	d061      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4933      	ldr	r1, [pc, #204]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 80019f0:	688a      	ldr	r2, [r1, #8]
 80019f2:	f022 0203 	bic.w	r2, r2, #3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80019fa:	f7fe ff65 	bl	80008c8 <HAL_GetTick>
 80019fe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	6862      	ldr	r2, [r4, #4]
 8001a0a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a0e:	d016      	beq.n	8001a3e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7fe ff5a 	bl	80008c8 <HAL_GetTick>
 8001a14:	1b80      	subs	r0, r0, r6
 8001a16:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a1a:	4298      	cmp	r0, r3
 8001a1c:	d9f0      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001a1e:	2003      	movs	r0, #3
 8001a20:	e7b8      	b.n	8001994 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001a2a:	d1e0      	bne.n	80019ee <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	e7b1      	b.n	8001994 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a30:	4a22      	ldr	r2, [pc, #136]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001a38:	d1d9      	bne.n	80019ee <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	e7aa      	b.n	8001994 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_ClockConfig+0x14c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	42ab      	cmp	r3, r5
 8001a48:	d909      	bls.n	8001a5e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	b2ea      	uxtb	r2, r5
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_RCC_ClockConfig+0x14c>)
 8001a4e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	42ab      	cmp	r3, r5
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	e79a      	b.n	8001994 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	f013 0f04 	tst.w	r3, #4
 8001a64:	d006      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 8001a68:	6893      	ldr	r3, [r2, #8]
 8001a6a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a6e:	68e1      	ldr	r1, [r4, #12]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	f013 0f08 	tst.w	r3, #8
 8001a7a:	d007      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 8001a7e:	6893      	ldr	r3, [r2, #8]
 8001a80:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a84:	6921      	ldr	r1, [r4, #16]
 8001a86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a8a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a8c:	f7ff ff1a 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_RCC_ClockConfig+0x150>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x154>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	40d8      	lsrs	r0, r3
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x158>)
 8001aa0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x15c>)
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	f7fe fec5 	bl	8000834 <HAL_InitTick>
  return HAL_OK;
 8001aaa:	2000      	movs	r0, #0
 8001aac:	e772      	b.n	8001994 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
}
 8001ab0:	4770      	bx	lr
        return HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	e76e      	b.n	8001994 <HAL_RCC_ClockConfig+0x28>
 8001ab6:	bf00      	nop
 8001ab8:	40023c00 	.word	0x40023c00
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	080022b4 	.word	0x080022b4
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000008 	.word	0x20000008

08001acc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001acc:	4b01      	ldr	r3, [pc, #4]	; (8001ad4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ada:	f7ff fff7 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ae6:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ae8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001aea:	40d8      	lsrs	r0, r3
 8001aec:	bd08      	pop	{r3, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	080022c4 	.word	0x080022c4

08001af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001afa:	f7ff ffe7 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b06:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b0a:	40d8      	lsrs	r0, r3
 8001b0c:	bd08      	pop	{r3, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	080022c4 	.word	0x080022c4

08001b18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b18:	b530      	push	{r4, r5, lr}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b1e:	6803      	ldr	r3, [r0, #0]
 8001b20:	f013 0f05 	tst.w	r3, #5
 8001b24:	d10e      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	f013 0f02 	tst.w	r3, #2
 8001b2c:	d138      	bne.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	f013 0f08 	tst.w	r3, #8
 8001b34:	f000 809b 	beq.w	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b38:	7d22      	ldrb	r2, [r4, #20]
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b3c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001b3e:	2000      	movs	r0, #0
}
 8001b40:	b003      	add	sp, #12
 8001b42:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001b44:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001b4a:	f7fe febd 	bl	80008c8 <HAL_GetTick>
 8001b4e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b50:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001b58:	d006      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b5a:	f7fe feb5 	bl	80008c8 <HAL_GetTick>
 8001b5e:	1b40      	subs	r0, r0, r5
 8001b60:	2802      	cmp	r0, #2
 8001b62:	d9f5      	bls.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8001b64:	2003      	movs	r0, #3
 8001b66:	e7eb      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b68:	6863      	ldr	r3, [r4, #4]
 8001b6a:	68a2      	ldr	r2, [r4, #8]
 8001b6c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b70:	68e2      	ldr	r2, [r4, #12]
 8001b72:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001b76:	4a41      	ldr	r2, [pc, #260]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001b7c:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001b82:	f7fe fea1 	bl	80008c8 <HAL_GetTick>
 8001b86:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b88:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001b90:	d1c9      	bne.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b92:	f7fe fe99 	bl	80008c8 <HAL_GetTick>
 8001b96:	1b40      	subs	r0, r0, r5
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d9f5      	bls.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	e7cf      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001bb8:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001bc2:	f7fe fe81 	bl	80008c8 <HAL_GetTick>
 8001bc6:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bd2:	f7fe fe79 	bl	80008c8 <HAL_GetTick>
 8001bd6:	1b40      	subs	r0, r0, r5
 8001bd8:	2802      	cmp	r0, #2
 8001bda:	d9f5      	bls.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 8001bdc:	2003      	movs	r0, #3
 8001bde:	e7af      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001be0:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001be4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001be8:	d012      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8001bea:	6922      	ldr	r2, [r4, #16]
 8001bec:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d00d      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bfc:	4921      	ldr	r1, [pc, #132]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8001bfe:	2001      	movs	r0, #1
 8001c00:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c02:	2000      	movs	r0, #0
 8001c04:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8001c06:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	f013 0f01 	tst.w	r3, #1
 8001c0e:	d112      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c10:	6923      	ldr	r3, [r4, #16]
 8001c12:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c16:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c1a:	d01d      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001c1c:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c1e:	6893      	ldr	r3, [r2, #8]
 8001c20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c24:	6093      	str	r3, [r2, #8]
 8001c26:	4915      	ldr	r1, [pc, #84]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c28:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001c2a:	6922      	ldr	r2, [r4, #16]
 8001c2c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001c30:	4313      	orrs	r3, r2
 8001c32:	670b      	str	r3, [r1, #112]	; 0x70
 8001c34:	e77b      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8001c36:	f7fe fe47 	bl	80008c8 <HAL_GetTick>
 8001c3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f013 0f02 	tst.w	r3, #2
 8001c44:	d1e4      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7fe fe3f 	bl	80008c8 <HAL_GetTick>
 8001c4a:	1b40      	subs	r0, r0, r5
 8001c4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c50:	4298      	cmp	r0, r3
 8001c52:	d9f3      	bls.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x124>
            return HAL_TIMEOUT;
 8001c54:	2003      	movs	r0, #3
 8001c56:	e773      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c58:	4908      	ldr	r1, [pc, #32]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c5a:	688a      	ldr	r2, [r1, #8]
 8001c5c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001c60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
 8001c6c:	e7db      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  return HAL_OK;
 8001c6e:	2000      	movs	r0, #0
 8001c70:	e766      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001c72:	bf00      	nop
 8001c74:	424711e0 	.word	0x424711e0
 8001c78:	42470068 	.word	0x42470068
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42470e40 	.word	0x42470e40

08001c88 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8001c88:	2801      	cmp	r0, #1
 8001c8a:	d12c      	bne.n	8001ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8001c90:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8001c94:	d003      	beq.n	8001c9e <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d127      	bne.n	8001cea <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8001c9a:	4816      	ldr	r0, [pc, #88]	; (8001cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8001c9c:	4770      	bx	lr
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ca6:	d015      	beq.n	8001cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8001caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb2:	4811      	ldr	r0, [pc, #68]	; (8001cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8001cb4:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8001cba:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8001cbe:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001cc2:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001cc6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8001cca:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001cce:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8001cd2:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8001cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <HAL_RCCEx_GetPeriphCLKFreq+0x74>)
 8001ce0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ce4:	e7e8      	b.n	8001cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
  uint32_t frequency = 0U;
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8001cea:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00bb8000 	.word	0x00bb8000
 8001cf8:	017d7840 	.word	0x017d7840
 8001cfc:	00f42400 	.word	0x00f42400

08001d00 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d00:	6802      	ldr	r2, [r0, #0]
 8001d02:	68d3      	ldr	r3, [r2, #12]
 8001d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d08:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d0a:	6802      	ldr	r2, [r0, #0]
 8001d0c:	6953      	ldr	r3, [r2, #20]
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d14:	2320      	movs	r3, #32
 8001d16:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001d1a:	4770      	bx	lr

08001d1c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d1c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b21      	cmp	r3, #33	; 0x21
 8001d24:	d12a      	bne.n	8001d7c <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d26:	6883      	ldr	r3, [r0, #8]
 8001d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2c:	d016      	beq.n	8001d5c <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d2e:	6a03      	ldr	r3, [r0, #32]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	6202      	str	r2, [r0, #32]
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	6803      	ldr	r3, [r0, #0]
 8001d38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d3a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001d42:	b9eb      	cbnz	r3, 8001d80 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d44:	6802      	ldr	r2, [r0, #0]
 8001d46:	68d3      	ldr	r3, [r2, #12]
 8001d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d4c:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d4e:	6802      	ldr	r2, [r0, #0]
 8001d50:	68d3      	ldr	r3, [r2, #12]
 8001d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d56:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8001d58:	2000      	movs	r0, #0
 8001d5a:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d5c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	6802      	ldr	r2, [r0, #0]
 8001d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d66:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001d68:	6903      	ldr	r3, [r0, #16]
 8001d6a:	b91b      	cbnz	r3, 8001d74 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8001d6c:	6a03      	ldr	r3, [r0, #32]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	6203      	str	r3, [r0, #32]
 8001d72:	e7e2      	b.n	8001d3a <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8001d74:	6a03      	ldr	r3, [r0, #32]
 8001d76:	3301      	adds	r3, #1
 8001d78:	6203      	str	r3, [r0, #32]
 8001d7a:	e7de      	b.n	8001d3a <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	4770      	bx	lr
    return HAL_OK;
 8001d80:	2000      	movs	r0, #0
  }
}
 8001d82:	4770      	bx	lr

08001d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d84:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001d88:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d8a:	6802      	ldr	r2, [r0, #0]
 8001d8c:	6913      	ldr	r3, [r2, #16]
 8001d8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d92:	68c1      	ldr	r1, [r0, #12]
 8001d94:	430b      	orrs	r3, r1
 8001d96:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d98:	6883      	ldr	r3, [r0, #8]
 8001d9a:	6902      	ldr	r2, [r0, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	6942      	ldr	r2, [r0, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	69c2      	ldr	r2, [r0, #28]
 8001da4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001da6:	6801      	ldr	r1, [r0, #0]
 8001da8:	68cb      	ldr	r3, [r1, #12]
 8001daa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001dae:	f023 030c 	bic.w	r3, r3, #12
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001db6:	6802      	ldr	r2, [r0, #0]
 8001db8:	6953      	ldr	r3, [r2, #20]
 8001dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dbe:	6981      	ldr	r1, [r0, #24]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dc4:	69c3      	ldr	r3, [r0, #28]
 8001dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dca:	d03b      	beq.n	8001e44 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dcc:	6803      	ldr	r3, [r0, #0]
 8001dce:	4a71      	ldr	r2, [pc, #452]	; (8001f94 <UART_SetConfig+0x210>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	f000 80ab 	beq.w	8001f2c <UART_SetConfig+0x1a8>
 8001dd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	f000 80a6 	beq.w	8001f2c <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001de0:	f7ff fe7a 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001de4:	f04f 0900 	mov.w	r9, #0
 8001de8:	1806      	adds	r6, r0, r0
 8001dea:	eb49 0709 	adc.w	r7, r9, r9
 8001dee:	eb16 0b00 	adds.w	fp, r6, r0
 8001df2:	eb47 0c09 	adc.w	ip, r7, r9
 8001df6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8001dfa:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8001dfe:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8001e02:	4693      	mov	fp, r2
 8001e04:	469c      	mov	ip, r3
 8001e06:	6863      	ldr	r3, [r4, #4]
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	0f9b      	lsrs	r3, r3, #30
 8001e0c:	eb10 000b 	adds.w	r0, r0, fp
 8001e10:	eb49 010c 	adc.w	r1, r9, ip
 8001e14:	f7fe f9e0 	bl	80001d8 <__aeabi_uldivmod>
 8001e18:	4d5f      	ldr	r5, [pc, #380]	; (8001f98 <UART_SetConfig+0x214>)
 8001e1a:	fba5 3200 	umull	r3, r2, r5, r0
 8001e1e:	0951      	lsrs	r1, r2, #5
 8001e20:	2264      	movs	r2, #100	; 0x64
 8001e22:	fb02 0211 	mls	r2, r2, r1, r0
 8001e26:	0113      	lsls	r3, r2, #4
 8001e28:	3332      	adds	r3, #50	; 0x32
 8001e2a:	fba5 2303 	umull	r2, r3, r5, r3
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e34:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	6821      	ldr	r1, [r4, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
    }
  }
}
 8001e42:	e0a4      	b.n	8001f8e <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e44:	6803      	ldr	r3, [r0, #0]
 8001e46:	4a53      	ldr	r2, [pc, #332]	; (8001f94 <UART_SetConfig+0x210>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d039      	beq.n	8001ec0 <UART_SetConfig+0x13c>
 8001e4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d035      	beq.n	8001ec0 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e54:	f7ff fe40 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e58:	4683      	mov	fp, r0
 8001e5a:	f04f 0c00 	mov.w	ip, #0
 8001e5e:	1806      	adds	r6, r0, r0
 8001e60:	eb4c 070c 	adc.w	r7, ip, ip
 8001e64:	eb16 0800 	adds.w	r8, r6, r0
 8001e68:	eb47 090c 	adc.w	r9, r7, ip
 8001e6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e78:	4690      	mov	r8, r2
 8001e7a:	4699      	mov	r9, r3
 8001e7c:	6862      	ldr	r2, [r4, #4]
 8001e7e:	2100      	movs	r1, #0
 8001e80:	1892      	adds	r2, r2, r2
 8001e82:	eb41 0301 	adc.w	r3, r1, r1
 8001e86:	eb1b 0008 	adds.w	r0, fp, r8
 8001e8a:	eb4c 0109 	adc.w	r1, ip, r9
 8001e8e:	f7fe f9a3 	bl	80001d8 <__aeabi_uldivmod>
 8001e92:	4d41      	ldr	r5, [pc, #260]	; (8001f98 <UART_SetConfig+0x214>)
 8001e94:	fba5 3200 	umull	r3, r2, r5, r0
 8001e98:	0951      	lsrs	r1, r2, #5
 8001e9a:	2264      	movs	r2, #100	; 0x64
 8001e9c:	fb02 0211 	mls	r2, r2, r1, r0
 8001ea0:	00d3      	lsls	r3, r2, #3
 8001ea2:	3332      	adds	r3, #50	; 0x32
 8001ea4:	fba5 2303 	umull	r2, r3, r5, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	005a      	lsls	r2, r3, #1
 8001eac:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001eb0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	6821      	ldr	r1, [r4, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
 8001ebe:	e066      	b.n	8001f8e <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ec0:	f7ff fe1a 	bl	8001af8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ec4:	4680      	mov	r8, r0
 8001ec6:	f04f 0900 	mov.w	r9, #0
 8001eca:	1806      	adds	r6, r0, r0
 8001ecc:	eb49 0709 	adc.w	r7, r9, r9
 8001ed0:	eb16 0b00 	adds.w	fp, r6, r0
 8001ed4:	eb47 0c09 	adc.w	ip, r7, r9
 8001ed8:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8001edc:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8001ee0:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8001ee4:	4693      	mov	fp, r2
 8001ee6:	469c      	mov	ip, r3
 8001ee8:	6862      	ldr	r2, [r4, #4]
 8001eea:	2100      	movs	r1, #0
 8001eec:	1892      	adds	r2, r2, r2
 8001eee:	eb41 0301 	adc.w	r3, r1, r1
 8001ef2:	eb18 000b 	adds.w	r0, r8, fp
 8001ef6:	eb49 010c 	adc.w	r1, r9, ip
 8001efa:	f7fe f96d 	bl	80001d8 <__aeabi_uldivmod>
 8001efe:	4d26      	ldr	r5, [pc, #152]	; (8001f98 <UART_SetConfig+0x214>)
 8001f00:	fba5 3200 	umull	r3, r2, r5, r0
 8001f04:	0951      	lsrs	r1, r2, #5
 8001f06:	2264      	movs	r2, #100	; 0x64
 8001f08:	fb02 0211 	mls	r2, r2, r1, r0
 8001f0c:	00d3      	lsls	r3, r2, #3
 8001f0e:	3332      	adds	r3, #50	; 0x32
 8001f10:	fba5 2303 	umull	r2, r3, r5, r3
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	005a      	lsls	r2, r3, #1
 8001f18:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001f1c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	6821      	ldr	r1, [r4, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
 8001f2a:	e030      	b.n	8001f8e <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f2c:	f7ff fde4 	bl	8001af8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f30:	f04f 0900 	mov.w	r9, #0
 8001f34:	1806      	adds	r6, r0, r0
 8001f36:	eb49 0709 	adc.w	r7, r9, r9
 8001f3a:	eb16 0b00 	adds.w	fp, r6, r0
 8001f3e:	eb47 0c09 	adc.w	ip, r7, r9
 8001f42:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8001f46:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8001f4a:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8001f4e:	4693      	mov	fp, r2
 8001f50:	469c      	mov	ip, r3
 8001f52:	6863      	ldr	r3, [r4, #4]
 8001f54:	009a      	lsls	r2, r3, #2
 8001f56:	0f9b      	lsrs	r3, r3, #30
 8001f58:	eb10 000b 	adds.w	r0, r0, fp
 8001f5c:	eb49 010c 	adc.w	r1, r9, ip
 8001f60:	f7fe f93a 	bl	80001d8 <__aeabi_uldivmod>
 8001f64:	4d0c      	ldr	r5, [pc, #48]	; (8001f98 <UART_SetConfig+0x214>)
 8001f66:	fba5 3200 	umull	r3, r2, r5, r0
 8001f6a:	0951      	lsrs	r1, r2, #5
 8001f6c:	2264      	movs	r2, #100	; 0x64
 8001f6e:	fb02 0211 	mls	r2, r2, r1, r0
 8001f72:	0113      	lsls	r3, r2, #4
 8001f74:	3332      	adds	r3, #50	; 0x32
 8001f76:	fba5 2303 	umull	r2, r3, r5, r3
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f80:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	6821      	ldr	r1, [r4, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
}
 8001f8e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8001f92:	bf00      	nop
 8001f94:	40011000 	.word	0x40011000
 8001f98:	51eb851f 	.word	0x51eb851f

08001f9c <HAL_UART_Init>:
  if (huart == NULL)
 8001f9c:	b358      	cbz	r0, 8001ff6 <HAL_UART_Init+0x5a>
{
 8001f9e:	b510      	push	{r4, lr}
 8001fa0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001fa2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001fa6:	b30b      	cbz	r3, 8001fec <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001fa8:	2324      	movs	r3, #36	; 0x24
 8001faa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	68d3      	ldr	r3, [r2, #12]
 8001fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fb6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff fee3 	bl	8001d84 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fbe:	6822      	ldr	r2, [r4, #0]
 8001fc0:	6913      	ldr	r3, [r2, #16]
 8001fc2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001fc6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fc8:	6822      	ldr	r2, [r4, #0]
 8001fca:	6953      	ldr	r3, [r2, #20]
 8001fcc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001fd0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001fd2:	6822      	ldr	r2, [r4, #0]
 8001fd4:	68d3      	ldr	r3, [r2, #12]
 8001fd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fda:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fdc:	2000      	movs	r0, #0
 8001fde:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fe6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001fea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001fec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ff0:	f7fe fbb8 	bl	8000764 <HAL_UART_MspInit>
 8001ff4:	e7d8      	b.n	8001fa8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001ff6:	2001      	movs	r0, #1
}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_UART_TxCpltCallback>:
}
 8001ffa:	4770      	bx	lr

08001ffc <UART_EndTransmit_IT>:
{
 8001ffc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ffe:	6801      	ldr	r1, [r0, #0]
 8002000:	68cb      	ldr	r3, [r1, #12]
 8002002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002006:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002008:	2320      	movs	r3, #32
 800200a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800200e:	f7ff fff4 	bl	8001ffa <HAL_UART_TxCpltCallback>
}
 8002012:	2000      	movs	r0, #0
 8002014:	bd08      	pop	{r3, pc}

08002016 <HAL_UART_RxCpltCallback>:
}
 8002016:	4770      	bx	lr

08002018 <UART_Receive_IT>:
{
 8002018:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800201a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b22      	cmp	r3, #34	; 0x22
 8002022:	d145      	bne.n	80020b0 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002024:	6883      	ldr	r3, [r0, #8]
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202a:	d00e      	beq.n	800204a <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800202c:	6903      	ldr	r3, [r0, #16]
 800202e:	bb03      	cbnz	r3, 8002072 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002030:	6803      	ldr	r3, [r0, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002036:	1c59      	adds	r1, r3, #1
 8002038:	6281      	str	r1, [r0, #40]	; 0x28
 800203a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800203c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800203e:	3b01      	subs	r3, #1
 8002040:	b29b      	uxth	r3, r3
 8002042:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002044:	b1f3      	cbz	r3, 8002084 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8002046:	2000      	movs	r0, #0
 8002048:	e033      	b.n	80020b2 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800204a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800204c:	6903      	ldr	r3, [r0, #16]
 800204e:	b943      	cbnz	r3, 8002062 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002050:	6803      	ldr	r3, [r0, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002058:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800205a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800205c:	3302      	adds	r3, #2
 800205e:	6283      	str	r3, [r0, #40]	; 0x28
 8002060:	e7ec      	b.n	800203c <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002062:	6803      	ldr	r3, [r0, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800206a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800206c:	3301      	adds	r3, #1
 800206e:	6283      	str	r3, [r0, #40]	; 0x28
 8002070:	e7e4      	b.n	800203c <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002072:	6803      	ldr	r3, [r0, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002078:	1c51      	adds	r1, r2, #1
 800207a:	6281      	str	r1, [r0, #40]	; 0x28
 800207c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002080:	7013      	strb	r3, [r2, #0]
 8002082:	e7db      	b.n	800203c <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002084:	6802      	ldr	r2, [r0, #0]
 8002086:	68d3      	ldr	r3, [r2, #12]
 8002088:	f023 0320 	bic.w	r3, r3, #32
 800208c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800208e:	6802      	ldr	r2, [r0, #0]
 8002090:	68d3      	ldr	r3, [r2, #12]
 8002092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002096:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002098:	6802      	ldr	r2, [r0, #0]
 800209a:	6953      	ldr	r3, [r2, #20]
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80020a2:	2320      	movs	r3, #32
 80020a4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80020a8:	f7ff ffb5 	bl	8002016 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80020ac:	2000      	movs	r0, #0
 80020ae:	e000      	b.n	80020b2 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80020b0:	2002      	movs	r0, #2
}
 80020b2:	bd08      	pop	{r3, pc}

080020b4 <HAL_UART_ErrorCallback>:
}
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_UART_IRQHandler>:
{
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020bc:	6802      	ldr	r2, [r0, #0]
 80020be:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020c0:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020c2:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80020c4:	f013 000f 	ands.w	r0, r3, #15
 80020c8:	d105      	bne.n	80020d6 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020ca:	f013 0f20 	tst.w	r3, #32
 80020ce:	d002      	beq.n	80020d6 <HAL_UART_IRQHandler+0x1e>
 80020d0:	f011 0f20 	tst.w	r1, #32
 80020d4:	d156      	bne.n	8002184 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d06a      	beq.n	80021b0 <HAL_UART_IRQHandler+0xf8>
 80020da:	f012 0201 	ands.w	r2, r2, #1
 80020de:	d102      	bne.n	80020e6 <HAL_UART_IRQHandler+0x2e>
 80020e0:	f411 7f90 	tst.w	r1, #288	; 0x120
 80020e4:	d064      	beq.n	80021b0 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020e6:	f013 0f01 	tst.w	r3, #1
 80020ea:	d006      	beq.n	80020fa <HAL_UART_IRQHandler+0x42>
 80020ec:	f411 7f80 	tst.w	r1, #256	; 0x100
 80020f0:	d003      	beq.n	80020fa <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80020f4:	f040 0001 	orr.w	r0, r0, #1
 80020f8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020fa:	f013 0f04 	tst.w	r3, #4
 80020fe:	d004      	beq.n	800210a <HAL_UART_IRQHandler+0x52>
 8002100:	b11a      	cbz	r2, 800210a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002102:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002104:	f040 0002 	orr.w	r0, r0, #2
 8002108:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800210a:	f013 0f02 	tst.w	r3, #2
 800210e:	d004      	beq.n	800211a <HAL_UART_IRQHandler+0x62>
 8002110:	b11a      	cbz	r2, 800211a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002112:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002114:	f040 0004 	orr.w	r0, r0, #4
 8002118:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800211a:	f013 0f08 	tst.w	r3, #8
 800211e:	d007      	beq.n	8002130 <HAL_UART_IRQHandler+0x78>
 8002120:	f011 0f20 	tst.w	r1, #32
 8002124:	d100      	bne.n	8002128 <HAL_UART_IRQHandler+0x70>
 8002126:	b11a      	cbz	r2, 8002130 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002128:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800212a:	f042 0208 	orr.w	r2, r2, #8
 800212e:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002130:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002132:	2a00      	cmp	r2, #0
 8002134:	d048      	beq.n	80021c8 <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002136:	f013 0f20 	tst.w	r3, #32
 800213a:	d002      	beq.n	8002142 <HAL_UART_IRQHandler+0x8a>
 800213c:	f011 0f20 	tst.w	r1, #32
 8002140:	d124      	bne.n	800218c <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800214a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800214c:	f012 0f08 	tst.w	r2, #8
 8002150:	d100      	bne.n	8002154 <HAL_UART_IRQHandler+0x9c>
 8002152:	b33b      	cbz	r3, 80021a4 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 8002154:	4620      	mov	r0, r4
 8002156:	f7ff fdd3 	bl	8001d00 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002162:	d01b      	beq.n	800219c <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800216c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800216e:	b18b      	cbz	r3, 8002194 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <HAL_UART_IRQHandler+0x124>)
 8002172:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002174:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002176:	f7fe fce3 	bl	8000b40 <HAL_DMA_Abort_IT>
 800217a:	b328      	cbz	r0, 80021c8 <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800217c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800217e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002180:	4798      	blx	r3
 8002182:	e021      	b.n	80021c8 <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 8002184:	4620      	mov	r0, r4
 8002186:	f7ff ff47 	bl	8002018 <UART_Receive_IT>
      return;
 800218a:	e01d      	b.n	80021c8 <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ff43 	bl	8002018 <UART_Receive_IT>
 8002192:	e7d6      	b.n	8002142 <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8002194:	4620      	mov	r0, r4
 8002196:	f7ff ff8d 	bl	80020b4 <HAL_UART_ErrorCallback>
 800219a:	e015      	b.n	80021c8 <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff ff89 	bl	80020b4 <HAL_UART_ErrorCallback>
 80021a2:	e011      	b.n	80021c8 <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7ff ff85 	bl	80020b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 80021ae:	e00b      	b.n	80021c8 <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80021b4:	d002      	beq.n	80021bc <HAL_UART_IRQHandler+0x104>
 80021b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80021ba:	d106      	bne.n	80021ca <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80021c0:	d002      	beq.n	80021c8 <HAL_UART_IRQHandler+0x110>
 80021c2:	f011 0f40 	tst.w	r1, #64	; 0x40
 80021c6:	d104      	bne.n	80021d2 <HAL_UART_IRQHandler+0x11a>
}
 80021c8:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff fda6 	bl	8001d1c <UART_Transmit_IT>
    return;
 80021d0:	e7fa      	b.n	80021c8 <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 80021d2:	4620      	mov	r0, r4
 80021d4:	f7ff ff12 	bl	8001ffc <UART_EndTransmit_IT>
    return;
 80021d8:	e7f6      	b.n	80021c8 <HAL_UART_IRQHandler+0x110>
 80021da:	bf00      	nop
 80021dc:	080021e1 	.word	0x080021e1

080021e0 <UART_DMAAbortOnError>:
{
 80021e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021e8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80021ea:	f7ff ff63 	bl	80020b4 <HAL_UART_ErrorCallback>
}
 80021ee:	bd08      	pop	{r3, pc}

080021f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021f6:	e003      	b.n	8002200 <LoopCopyDataInit>

080021f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021fe:	3104      	adds	r1, #4

08002200 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002204:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002206:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002208:	d3f6      	bcc.n	80021f8 <CopyDataInit>
  ldr  r2, =_sbss
 800220a:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800220c:	e002      	b.n	8002214 <LoopFillZerobss>

0800220e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800220e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002210:	f842 3b04 	str.w	r3, [r2], #4

08002214 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002216:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002218:	d3f9      	bcc.n	800220e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800221a:	f7fe fafd 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221e:	f000 f811 	bl	8002244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002222:	f7fe fa15 	bl	8000650 <main>
  bx  lr    
 8002226:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002228:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800222c:	080022e4 	.word	0x080022e4
  ldr  r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002234:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002238:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800223c:	20000114 	.word	0x20000114

08002240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC_IRQHandler>
	...

08002244 <__libc_init_array>:
 8002244:	b570      	push	{r4, r5, r6, lr}
 8002246:	4e0d      	ldr	r6, [pc, #52]	; (800227c <__libc_init_array+0x38>)
 8002248:	4c0d      	ldr	r4, [pc, #52]	; (8002280 <__libc_init_array+0x3c>)
 800224a:	1ba4      	subs	r4, r4, r6
 800224c:	10a4      	asrs	r4, r4, #2
 800224e:	2500      	movs	r5, #0
 8002250:	42a5      	cmp	r5, r4
 8002252:	d109      	bne.n	8002268 <__libc_init_array+0x24>
 8002254:	4e0b      	ldr	r6, [pc, #44]	; (8002284 <__libc_init_array+0x40>)
 8002256:	4c0c      	ldr	r4, [pc, #48]	; (8002288 <__libc_init_array+0x44>)
 8002258:	f000 f820 	bl	800229c <_init>
 800225c:	1ba4      	subs	r4, r4, r6
 800225e:	10a4      	asrs	r4, r4, #2
 8002260:	2500      	movs	r5, #0
 8002262:	42a5      	cmp	r5, r4
 8002264:	d105      	bne.n	8002272 <__libc_init_array+0x2e>
 8002266:	bd70      	pop	{r4, r5, r6, pc}
 8002268:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800226c:	4798      	blx	r3
 800226e:	3501      	adds	r5, #1
 8002270:	e7ee      	b.n	8002250 <__libc_init_array+0xc>
 8002272:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002276:	4798      	blx	r3
 8002278:	3501      	adds	r5, #1
 800227a:	e7f2      	b.n	8002262 <__libc_init_array+0x1e>
 800227c:	080022dc 	.word	0x080022dc
 8002280:	080022dc 	.word	0x080022dc
 8002284:	080022dc 	.word	0x080022dc
 8002288:	080022e0 	.word	0x080022e0

0800228c <memset>:
 800228c:	4402      	add	r2, r0
 800228e:	4603      	mov	r3, r0
 8002290:	4293      	cmp	r3, r2
 8002292:	d100      	bne.n	8002296 <memset+0xa>
 8002294:	4770      	bx	lr
 8002296:	f803 1b01 	strb.w	r1, [r3], #1
 800229a:	e7f9      	b.n	8002290 <memset+0x4>

0800229c <_init>:
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	bf00      	nop
 80022a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a2:	bc08      	pop	{r3}
 80022a4:	469e      	mov	lr, r3
 80022a6:	4770      	bx	lr

080022a8 <_fini>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	bf00      	nop
 80022ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ae:	bc08      	pop	{r3}
 80022b0:	469e      	mov	lr, r3
 80022b2:	4770      	bx	lr
